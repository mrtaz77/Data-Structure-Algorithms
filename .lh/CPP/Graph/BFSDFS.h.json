{
    "sourceFile": "CPP/Graph/BFSDFS.h",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1686152557849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1686153260608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n     vector<pair<int,int>>bfsTree;\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n     vector<double>dist(n,INFINITY);\r\n+    int i = 0;\r\n     dist[start] = 0;\r\n     queue<int>q;\r\n     q.push(start);\r\n     visited[start] = true;\r\n"
                },
                {
                    "date": 1686153266598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n     int i = 0;\r\n     dist[start] = 0;\r\n     queue<int>q;\r\n     q.push(start);\r\n+    i++;\r\n     visited[start] = true;\r\n     while(!q.empty()){\r\n         int v = q.front();\r\n         q.pop();\r\n"
                },
                {
                    "date": 1686153280820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,115 @@\n+#include <bits/stdc++.h>\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    int i = 0;\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    i++;\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                i++;\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+    cout<<\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+void DFSUtil(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSUtil(adj,dfsTree,visited,parent,x.first);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSUtil(adj,dfsTree,visited,parent,start);\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i])DFSUtil(adj,dfsTree,visited,parent,i);\r\n+    }\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+\r\n"
                },
                {
                    "date": 1686153287973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,115 @@\n+#include <bits/stdc++.h>\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    int i = 0;\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    i++;\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                i++;\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+    cout<<\"i = \"<<i<<endl;\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+void DFSUtil(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSUtil(adj,dfsTree,visited,parent,x.first);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSUtil(adj,dfsTree,visited,parent,start);\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i])DFSUtil(adj,dfsTree,visited,parent,i);\r\n+    }\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+\r\n"
                },
                {
                    "date": 1686153358663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n     int i = 0;\r\n     dist[start] = 0;\r\n     queue<int>q;\r\n     q.push(start);\r\n-    i++;\r\n     visited[start] = true;\r\n     while(!q.empty()){\r\n         int v = q.front();\r\n         q.pop();\r\n@@ -112,233 +111,4 @@\n     return dfsTree;\r\n }\r\n \r\n \r\n-#include <bits/stdc++.h>\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    int i = 0;\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    i++;\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                i++;\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-    cout<<\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-void DFSUtil(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSUtil(adj,dfsTree,visited,parent,x.first);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSUtil(adj,dfsTree,visited,parent,start);\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i])DFSUtil(adj,dfsTree,visited,parent,i);\r\n-    }\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-\r\n-#include <bits/stdc++.h>\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    int i = 0;\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    i++;\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-void DFSUtil(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSUtil(adj,dfsTree,visited,parent,x.first);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSUtil(adj,dfsTree,visited,parent,start);\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i])DFSUtil(adj,dfsTree,visited,parent,i);\r\n-    }\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-\r\n"
                },
                {
                    "date": 1686153457210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,8 @@\n         q.pop();\r\n         for(auto x:adj[v]){\r\n             if(!visited[x.first]){\r\n                 q.push(x.first);\r\n-                i++;\r\n                 parent[x.first] = v;\r\n                 dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n                 bfsTree.push_back({v,x.first});\r\n                 visited[x.first] = true;\r\n"
                },
                {
                    "date": 1686153465676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,111 @@\n+#include <bits/stdc++.h>\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+void DFSUtil(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSUtil(adj,dfsTree,visited,parent,x.first);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSUtil(adj,dfsTree,visited,parent,start);\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i])DFSUtil(adj,dfsTree,visited,parent,i);\r\n+    }\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+\r\n"
                },
                {
                    "date": 1686153716015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n #include\"GraphUtil.h\"\r\n using namespace std;\r\n \r\n vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n+    vector<pair<int,int>>bfsTree(1);\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n     vector<double>dist(n,INFINITY);\r\n     dist[start] = 0;\r\n@@ -108,117 +108,4 @@\n     return dfsTree;\r\n }\r\n \r\n \r\n-#include <bits/stdc++.h>\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    int i = 0;\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-    cout<<\"i = \"<<i<<endl;\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-void DFSUtil(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSUtil(adj,dfsTree,visited,parent,x.first);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSUtil(adj,dfsTree,visited,parent,start);\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i])DFSUtil(adj,dfsTree,visited,parent,i);\r\n-    }\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-\r\n"
                },
                {
                    "date": 1686153721302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     return bfsTree;\r\n }\r\n \r\n vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n+    vector<pair<int,int>>bfsTree(1);\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n     vector<double>dist(n,INFINITY);\r\n     queue<int>q;\r\n"
                },
                {
                    "date": 1686153745172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n #include\"GraphUtil.h\"\r\n using namespace std;\r\n \r\n vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree(1);\r\n+    vector<pair<int,int>>bfsTree();\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n     vector<double>dist(n,INFINITY);\r\n     dist[start] = 0;\r\n"
                },
                {
                    "date": 1686153751347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n #include\"GraphUtil.h\"\r\n using namespace std;\r\n \r\n vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree();\r\n+    vector<pair<int,int>>bfsTree(0);\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n     vector<double>dist(n,INFINITY);\r\n     dist[start] = 0;\r\n@@ -31,9 +31,9 @@\n     return bfsTree;\r\n }\r\n \r\n vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree(1);\r\n+    vector<pair<int,int>>bfsTree(0);\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n     vector<double>dist(n,INFINITY);\r\n     queue<int>q;\r\n"
                },
                {
                    "date": 1686153788426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     return bfsTree;\r\n }\r\n \r\n vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree(0);\r\n+    vector<pair<int,int>>bfsTree;\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n     vector<double>dist(n,INFINITY);\r\n     queue<int>q;\r\n"
                },
                {
                    "date": 1686153798022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n #include\"GraphUtil.h\"\r\n using namespace std;\r\n \r\n vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree(0);\r\n+    vector<pair<int,int>>bfsTree;\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n     vector<double>dist(n,INFINITY);\r\n     dist[start] = 0;\r\n"
                },
                {
                    "date": 1686154088171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n     vector<pair<int,int>>bfsTree;\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n     vector<double>dist(n,INFINITY);\r\n+    \r\n     dist[start] = 0;\r\n     queue<int>q;\r\n     q.push(start);\r\n     visited[start] = true;\r\n"
                },
                {
                    "date": 1686154094249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+#include <bits/stdc++.h>\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    cout<<\"In \"\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+void DFSUtil(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSUtil(adj,dfsTree,visited,parent,x.first);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSUtil(adj,dfsTree,visited,parent,start);\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i])DFSUtil(adj,dfsTree,visited,parent,i);\r\n+    }\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+\r\n"
                },
                {
                    "date": 1686154102661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+#include <bits/stdc++.h>\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    cout<<\"In bfs \"<<endl;\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+void DFSUtil(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSUtil(adj,dfsTree,visited,parent,x.first);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSUtil(adj,dfsTree,visited,parent,start);\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i])DFSUtil(adj,dfsTree,visited,parent,i);\r\n+    }\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+\r\n"
                },
                {
                    "date": 1686154131015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n         int v = q.front();\r\n         q.pop();\r\n         for(auto x:adj[v]){\r\n             if(!visited[x.first]){\r\n+                \r\n                 q.push(x.first);\r\n                 parent[x.first] = v;\r\n                 dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n                 bfsTree.push_back({v,x.first});\r\n@@ -109,228 +110,4 @@\n     return dfsTree;\r\n }\r\n \r\n \r\n-#include <bits/stdc++.h>\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    cout<<\"In \"\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-void DFSUtil(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSUtil(adj,dfsTree,visited,parent,x.first);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSUtil(adj,dfsTree,visited,parent,start);\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i])DFSUtil(adj,dfsTree,visited,parent,i);\r\n-    }\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-\r\n-#include <bits/stdc++.h>\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    \r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-void DFSUtil(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSUtil(adj,dfsTree,visited,parent,x.first);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSUtil(adj,dfsTree,visited,parent,start);\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i])DFSUtil(adj,dfsTree,visited,parent,i);\r\n-    }\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-\r\n"
                },
                {
                    "date": 1686154137659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n         int v = q.front();\r\n         q.pop();\r\n         for(auto x:adj[v]){\r\n             if(!visited[x.first]){\r\n-                \r\n+                cout<<x.first<<endl;\r\n                 q.push(x.first);\r\n                 parent[x.first] = v;\r\n                 dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n                 bfsTree.push_back({v,x.first});\r\n"
                },
                {
                    "date": 1686154151617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n     vector<pair<int,int>>bfsTree;\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n     vector<double>dist(n,INFINITY);\r\n-    cout<<\"In bfs \"<<endl;\r\n     dist[start] = 0;\r\n     queue<int>q;\r\n     q.push(start);\r\n     visited[start] = true;\r\n@@ -16,9 +15,8 @@\n         int v = q.front();\r\n         q.pop();\r\n         for(auto x:adj[v]){\r\n             if(!visited[x.first]){\r\n-                cout<<x.first<<endl;\r\n                 q.push(x.first);\r\n                 parent[x.first] = v;\r\n                 dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n                 bfsTree.push_back({v,x.first});\r\n"
                },
                {
                    "date": 1686303196273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n #include <bits/stdc++.h>\r\n-#include\"GraphUtil.h\"\r\n using namespace std;\r\n \r\n vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n     vector<pair<int,int>>bfsTree;\r\n"
                },
                {
                    "date": 1686303202723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,111 @@\n+#include <bits/stdc++.h>\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+void DFSUtil(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSUtil(adj,dfsTree,visited,parent,x.first);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSUtil(adj,dfsTree,visited,parent,start);\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i])DFSUtil(adj,dfsTree,visited,parent,i);\r\n+    }\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+\r\n"
                }
            ],
            "date": 1686152557849,
            "name": "Commit-0",
            "content": "#include <bits/stdc++.h>\r\n#include\"GraphUtil.h\"\r\nusing namespace std;\r\n\r\nvector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n    vector<pair<int,int>>bfsTree;\r\n    vector<bool>visited(n,false);\r\n    vector<int>parent(n,-1);\r\n    vector<double>dist(n,INFINITY);\r\n    dist[start] = 0;\r\n    queue<int>q;\r\n    q.push(start);\r\n    visited[start] = true;\r\n    while(!q.empty()){\r\n        int v = q.front();\r\n        q.pop();\r\n        for(auto x:adj[v]){\r\n            if(!visited[x.first]){\r\n                q.push(x.first);\r\n                parent[x.first] = v;\r\n                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n                bfsTree.push_back({v,x.first});\r\n                visited[x.first] = true;\r\n            }\r\n        }\r\n    }\r\n    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n    // cout<<endl;\r\n    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n    // cout<<endl;\r\n\r\n    return bfsTree;\r\n}\r\n\r\nvector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n    vector<pair<int,int>>bfsTree;\r\n    vector<bool>visited(n,false);\r\n    vector<int>parent(n,-1);\r\n    vector<double>dist(n,INFINITY);\r\n    queue<int>q;\r\n\r\n    for(int i=0;i<n;i++){\r\n        if(!visited[i]){\r\n            dist[i] = 0;\r\n            q.push(i);\r\n            visited[i] = true;\r\n            while(!q.empty()){\r\n                int v = q.front();\r\n                q.pop();\r\n                for(auto x:adj[v]){\r\n                    if(!visited[x.first]){\r\n                        q.push(x.first);\r\n                        parent[x.first] = v;\r\n                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n                        bfsTree.push_back({v,x.first});\r\n                        visited[x.first] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    \r\n    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n    // cout<<endl;\r\n    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n    // cout<<endl;\r\n\r\n    return bfsTree;\r\n}\r\n\r\nvoid DFSUtil(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n    visited[v] = true;\r\n    for(auto x : adj[v]){\r\n        if(!visited[x.first]){\r\n            dfsTree.push_back({v,x.first});\r\n            parent[x.first] = v;\r\n            DFSUtil(adj,dfsTree,visited,parent,x.first);\r\n        }\r\n    }\r\n}\r\n\r\nvector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n    vector<pair<int,int>> dfsTree;\r\n    vector<bool>visited(n,false);\r\n    vector<int>parent(n,-1);\r\n\r\n    DFSUtil(adj,dfsTree,visited,parent,start);\r\n\r\n    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n    // cout<<endl;\r\n\r\n    return dfsTree;\r\n}\r\n\r\nvector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n    vector<pair<int,int>> dfsTree;\r\n    vector<bool>visited(n,false);\r\n    vector<int>parent(n,-1);\r\n\r\n    for(int i=0;i<n;i++){\r\n        if(!visited[i])DFSUtil(adj,dfsTree,visited,parent,i);\r\n    }\r\n\r\n    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n    // cout<<endl;\r\n\r\n    return dfsTree;\r\n}\r\n\r\n\r\n"
        }
    ]
}