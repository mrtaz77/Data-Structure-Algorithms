{
    "sourceFile": "CPP/Graph/BFSDFS.h",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1686152557849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1686152557849,
            "name": "Commit-0",
            "content": "#include <bits/stdc++.h>\r\n#include\"GraphUtil.h\"\r\nusing namespace std;\r\n\r\nvector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n    vector<pair<int,int>>bfsTree;\r\n    vector<bool>visited(n,false);\r\n    vector<int>parent(n,-1);\r\n    vector<double>dist(n,INFINITY);\r\n    dist[start] = 0;\r\n    queue<int>q;\r\n    q.push(start);\r\n    visited[start] = true;\r\n    while(!q.empty()){\r\n        int v = q.front();\r\n        q.pop();\r\n        for(auto x:adj[v]){\r\n            if(!visited[x.first]){\r\n                q.push(x.first);\r\n                parent[x.first] = v;\r\n                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n                bfsTree.push_back({v,x.first});\r\n                visited[x.first] = true;\r\n            }\r\n        }\r\n    }\r\n    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n    // cout<<endl;\r\n    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n    // cout<<endl;\r\n\r\n    return bfsTree;\r\n}\r\n\r\nvector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n    vector<pair<int,int>>bfsTree;\r\n    vector<bool>visited(n,false);\r\n    vector<int>parent(n,-1);\r\n    vector<double>dist(n,INFINITY);\r\n    queue<int>q;\r\n\r\n    for(int i=0;i<n;i++){\r\n        if(!visited[i]){\r\n            dist[i] = 0;\r\n            q.push(i);\r\n            visited[i] = true;\r\n            while(!q.empty()){\r\n                int v = q.front();\r\n                q.pop();\r\n                for(auto x:adj[v]){\r\n                    if(!visited[x.first]){\r\n                        q.push(x.first);\r\n                        parent[x.first] = v;\r\n                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n                        bfsTree.push_back({v,x.first});\r\n                        visited[x.first] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    \r\n    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n    // cout<<endl;\r\n    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n    // cout<<endl;\r\n\r\n    return bfsTree;\r\n}\r\n\r\nvoid DFSUtil(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n    visited[v] = true;\r\n    for(auto x : adj[v]){\r\n        if(!visited[x.first]){\r\n            dfsTree.push_back({v,x.first});\r\n            parent[x.first] = v;\r\n            DFSUtil(adj,dfsTree,visited,parent,x.first);\r\n        }\r\n    }\r\n}\r\n\r\nvector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n    vector<pair<int,int>> dfsTree;\r\n    vector<bool>visited(n,false);\r\n    vector<int>parent(n,-1);\r\n\r\n    DFSUtil(adj,dfsTree,visited,parent,start);\r\n\r\n    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n    // cout<<endl;\r\n\r\n    return dfsTree;\r\n}\r\n\r\nvector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n    vector<pair<int,int>> dfsTree;\r\n    vector<bool>visited(n,false);\r\n    vector<int>parent(n,-1);\r\n\r\n    for(int i=0;i<n;i++){\r\n        if(!visited[i])DFSUtil(adj,dfsTree,visited,parent,i);\r\n    }\r\n\r\n    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n    // cout<<endl;\r\n\r\n    return dfsTree;\r\n}\r\n\r\n\r\n"
        }
    ]
}