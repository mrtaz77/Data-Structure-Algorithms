{
    "sourceFile": "CPP/Graph/BFSDFS.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 83,
            "patches": [
                {
                    "date": 1686106805048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1686106811790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n \r\n     return bfsTree;\r\n }\r\n \r\n-vector<\r\n+vector<pair<int,int>>\r\n \r\n \r\n \r\n int main(){\r\n"
                },
                {
                    "date": 1686106818099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n \r\n     return bfsTree;\r\n }\r\n \r\n-vector<pair<int,int>>\r\n+vector<pair<int,int>> DFSTra\r\n \r\n \r\n \r\n int main(){\r\n"
                },
                {
                    "date": 1686106869352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n \r\n     return bfsTree;\r\n }\r\n \r\n-vector<pair<int,int>> DFSTra\r\n+vector<pair<int,int>> DFSTrans\r\n \r\n \r\n \r\n int main(){\r\n"
                },
                {
                    "date": 1686106875920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n \r\n     return bfsTree;\r\n }\r\n \r\n-vector<pair<int,int>> DFSTrans\r\n+vector<pair<int,int>> DFSTraversal()\r\n \r\n \r\n \r\n int main(){\r\n"
                },
                {
                    "date": 1686106883514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,163 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>)\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686107093181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,163 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start)\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686107107926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,175 +101,14 @@\n \r\n     return bfsTree;\r\n }\r\n \r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start)\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,double>>\r\n }\r\n \r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n \r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n \r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>)\r\n-\r\n-\r\n-\r\n int main(){\r\n \r\n     freopen(\"input.txt\", \"r\", stdin);\r\n     freopen(\"output.txt\", \"w\", stdout);\r\n@@ -322,168 +161,5 @@\n     }\r\n \r\n \r\n     delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal()\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686107117080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n     return bfsTree;\r\n }\r\n \r\n vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,double>>\r\n+    vector<pair<int,int>> dfsTree\r\n }\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1686110254234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,167 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+}\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686110307703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    \r\n+}\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686110316118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n     vector<pair<int,int>> dfsTree;\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n \r\n-    \r\n+    DFSHelper\r\n }\r\n \r\n \r\n \r\n@@ -165,337 +165,5 @@\n     }\r\n \r\n \r\n     delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-}\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree\r\n-}\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686110324128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n     vector<pair<int,int>> dfsTree;\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n \r\n-    DFSHelper\r\n+    DFSHelper(adj,dfsTree,visited)\r\n }\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1686110347441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n     vector<pair<int,int>> dfsTree;\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n \r\n-    DFSHelper(adj,dfsTree,visited)\r\n+    DFSHelper(adj,dfsTree,visited,start)\r\n }\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1686110373271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n     vector<pair<int,int>> dfsTree;\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n \r\n-    DFSHelper(adj,dfsTree,visited,start)\r\n+    DFSHelper(adj,dfsTree,parent,visited,start)\r\n }\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1686110378735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,10 @@\n     vector<pair<int,int>> dfsTree;\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n \r\n-    DFSHelper(adj,dfsTree,parent,visited,start)\r\n+    DFSHelper(adj,dfsTree,parent,visited,start);\r\n+    \r\n }\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1686110386869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,parent,visited,start);\r\n+\r\n+}\r\n+\r\n+v\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686110403314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,parent,visited,start);\r\n+\r\n+}\r\n+\r\n+DFS\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686110408897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,parent,visited,start);\r\n+\r\n+}\r\n+\r\n+DFSHelper(vector<pair<int,double>> adj,vector<pair<int,double\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686110418961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n     DFSHelper(adj,dfsTree,parent,visited,start);\r\n \r\n }\r\n \r\n-DFSHelper(vector<pair<int,double>> adj,vector<pair<int,double\r\n+DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int\r\n \r\n \r\n \r\n int main(){\r\n@@ -168,519 +168,5 @@\n     }\r\n \r\n \r\n     delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,parent,visited,start);\r\n-\r\n-}\r\n-\r\n-DFS\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,parent,visited,start);\r\n-\r\n-}\r\n-\r\n-v\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,parent,visited,start);\r\n-    \r\n-}\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686110432321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,parent,visited,start);\r\n+\r\n+}\r\n+\r\n+DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686110440057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,parent,visited,start);\r\n+\r\n+}\r\n+\r\n+DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686110446656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,174 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,parent,visited,start);\r\n+\r\n+}\r\n+\r\n+DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+    \r\n+}\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686110466530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,174 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,start);\r\n+\r\n+}\r\n+\r\n+DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+\r\n+}\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686110481328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,13 +106,13 @@\n     vector<pair<int,int>> dfsTree;\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n \r\n-    DFSHelper(adj,dfsTree,visited,start);\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n \r\n }\r\n \r\n-DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n \r\n }\r\n \r\n \r\n@@ -170,695 +170,5 @@\n     }\r\n \r\n \r\n     delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,parent,visited,start);\r\n-\r\n-}\r\n-\r\n-DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    \r\n-}\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,parent,visited,start);\r\n-\r\n-}\r\n-\r\n-DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,parent,visited,start);\r\n-\r\n-}\r\n-\r\n-DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,parent,visited,start);\r\n-\r\n-}\r\n-\r\n-DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686110502344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n \r\n }\r\n \r\n void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-\r\n+    \r\n }\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1686110531204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n \r\n }\r\n \r\n void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    \r\n+    visited\r\n }\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1686110537856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,10 @@\n \r\n }\r\n \r\n void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    visited\r\n+    visited[v] = true;\r\n+    \r\n }\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1686110544766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n }\r\n \r\n void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n     visited[v] = true;\r\n-    \r\n+    for(a)\r\n }\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1686110551311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v])\r\n+}\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686110557926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,188 +112,15 @@\n }\r\n \r\n void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n     visited[v] = true;\r\n-    for(auto x : adj[v])\r\n-}\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n+    for(auto x : adj[v]){\r\n+        \r\n     }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n }\r\n \r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n \r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n \r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    visited[v] = true;\r\n-    for(a)\r\n-}\r\n-\r\n-\r\n-\r\n int main(){\r\n \r\n     freopen(\"input.txt\", \"r\", stdin);\r\n     freopen(\"output.txt\", \"w\", stdout);\r\n"
                },
                {
                    "date": 1686110627122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,9 +113,9 @@\n \r\n void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n     visited[v] = true;\r\n     for(auto x : adj[v]){\r\n-        \r\n+        if(visited[x)\r\n     }\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1686110634417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,177 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first])\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686110651370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,191 +113,16 @@\n \r\n void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n     visited[v] = true;\r\n     for(auto x : adj[v]){\r\n-        if(!visited[x.first])\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n+        if(!visited[x.first]){\r\n+            d\r\n         }\r\n-        i--;\r\n-        cout<<endl;\r\n     }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n }\r\n \r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n \r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n \r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(visited[x)\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n int main(){\r\n \r\n     freopen(\"input.txt\", \"r\", stdin);\r\n     freopen(\"output.txt\", \"w\", stdout);\r\n"
                },
                {
                    "date": 1686110657696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,9 @@\n void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n     visited[v] = true;\r\n     for(auto x : adj[v]){\r\n         if(!visited[x.first]){\r\n-            d\r\n+            dfsTree.push_back(v,\r\n         }\r\n     }\r\n }\r\n \r\n"
                },
                {
                    "date": 1686110664660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,179 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first}\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686110702149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,180 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686110712492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,10 @@\n     visited[v] = true;\r\n     for(auto x : adj[v]){\r\n         if(!visited[x.first]){\r\n             dfsTree.push_back({v,x.first});\r\n-            parent\r\n+            parent[x.first] = v;\r\n+            \r\n         }\r\n     }\r\n }\r\n \r\n@@ -176,363 +177,5 @@\n     }\r\n \r\n \r\n     delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first}\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back(v,\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686110719707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n     for(auto x : adj[v]){\r\n         if(!visited[x.first]){\r\n             dfsTree.push_back({v,x.first});\r\n             parent[x.first] = v;\r\n-            \r\n+            DF\r\n         }\r\n     }\r\n }\r\n \r\n"
                },
                {
                    "date": 1686113332382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,181 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,visited\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686113339539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n     for(auto x : adj[v]){\r\n         if(!visited[x.first]){\r\n             dfsTree.push_back({v,x.first});\r\n             parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,visited\r\n+            DFSHelper(adj,dfsTree,visited,parent,v);\r\n         }\r\n     }\r\n }\r\n \r\n@@ -177,186 +177,5 @@\n     }\r\n \r\n \r\n     delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DF\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686113348721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,8 +108,10 @@\n     vector<int>parent(n,-1);\r\n \r\n     DFSHelper(adj,dfsTree,visited,parent,start);\r\n \r\n+    \r\n+\r\n }\r\n \r\n void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n     visited[v] = true;\r\n"
                },
                {
                    "date": 1686113368338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,10 @@\n     vector<int>parent(n,-1);\r\n \r\n     DFSHelper(adj,dfsTree,visited,parent,start);\r\n \r\n-    \r\n+    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n \r\n }\r\n \r\n void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n"
                },
                {
                    "date": 1686113376433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,185 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    cout<<endl;\r\n+\r\n+    \r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,v);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686113388127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,185 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    cout<<endl;\r\n+\r\n+    return DFS\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,v);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686113394636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,185 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    cout<<endl;\r\n+\r\n+    return dfstree;\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,v);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686113415866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,v);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    \r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686113424994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,201 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,v);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686113431138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,201 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,v);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> dfsTree = DFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686113456967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,9 +179,9 @@\n         i--;\r\n         cout<<endl;\r\n     }\r\n \r\n-    vector<pair<int,int>> dfsTree = DFStraversal(adj,n,start);\r\n+    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n     \r\n     cout<<\"BFS Tree : \\n\";\r\n \r\n     for(int i=0;i<bfsTree.size();i++){\r\n@@ -197,1132 +197,5 @@\n     }\r\n \r\n \r\n     delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,v);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,v);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    \r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    cout<<endl;\r\n-\r\n-    return dfstree;\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,v);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    cout<<endl;\r\n-\r\n-    return DFS\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,v);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    cout<<endl;\r\n-\r\n-    \r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,v);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,v);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686113464071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,201 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,v);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n+    \r\n+    cout<<\"DFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<dfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686113471016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,201 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,v);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n+    \r\n+    cout<<\"DFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<dfsTree.size();i++){\r\n+        int v = dfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(dfsTree[i].first==v){\r\n+            cout<<dfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686113477231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,201 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,v);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n+    \r\n+    cout<<\"DFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<dfsTree.size();i++){\r\n+        int v = dfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(dfsTree[i].first==v){\r\n+            cout<<dfsTree[i].second;\r\n+            i = i+1;\r\n+            if(dfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686113515456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,21 +114,12 @@\n \r\n     return dfsTree;\r\n }\r\n \r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,v);\r\n-        }\r\n-    }\r\n-}\r\n \r\n \r\n \r\n+\r\n int main(){\r\n \r\n     freopen(\"input.txt\", \"r\", stdin);\r\n     freopen(\"output.txt\", \"w\", stdout);\r\n@@ -197,608 +188,5 @@\n     }\r\n \r\n \r\n     delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,v);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n-    \r\n-    cout<<\"DFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<dfsTree.size();i++){\r\n-        int v = dfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(dfsTree[i].first==v){\r\n-            cout<<dfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,v);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n-    \r\n-    cout<<\"DFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<dfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,v);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686113701685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,8 +101,19 @@\n \r\n     return bfsTree;\r\n }\r\n \r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n     vector<pair<int,int>> dfsTree;\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n"
                },
                {
                    "date": 1686113897218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,8 +119,10 @@\n     vector<int>parent(n,-1);\r\n \r\n     DFSHelper(adj,dfsTree,visited,parent,start);\r\n \r\n+    \r\n+\r\n     for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n     cout<<endl;\r\n \r\n     return dfsTree;\r\n"
                },
                {
                    "date": 1686113903141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n     vector<int>parent(n,-1);\r\n \r\n     DFSHelper(adj,dfsTree,visited,parent,start);\r\n \r\n-    \r\n+    cout<<dfsTree.size()<<endl;\r\n \r\n     for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n     cout<<endl;\r\n \r\n"
                },
                {
                    "date": 1686113933134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,8 +102,9 @@\n     return bfsTree;\r\n }\r\n \r\n void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+    \r\n     visited[v] = true;\r\n     for(auto x : adj[v]){\r\n         if(!visited[x.first]){\r\n             dfsTree.push_back({v,x.first});\r\n"
                },
                {
                    "date": 1686113945110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,206 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+    cout<<\"DFSHelper  : \"<<v\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+    cout<<dfsTree.size()<<endl;\r\n+\r\n+    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n+    \r\n+    cout<<\"DFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<dfsTree.size();i++){\r\n+        int v = dfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(dfsTree[i].first==v){\r\n+            cout<<dfsTree[i].second;\r\n+            i = i+1;\r\n+            if(dfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686113951191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n     return bfsTree;\r\n }\r\n \r\n void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    cout<<\"DFSHelper  : \"<<v\r\n+    cout<<\"DFSHelper  : \"<<v<<endl;\r\n     visited[v] = true;\r\n     for(auto x : adj[v]){\r\n         if(!visited[x.first]){\r\n             dfsTree.push_back({v,x.first});\r\n@@ -202,211 +202,5 @@\n     }\r\n \r\n \r\n     delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n-    \r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    cout<<dfsTree.size()<<endl;\r\n-\r\n-    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n-    \r\n-    cout<<\"DFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<dfsTree.size();i++){\r\n-        int v = dfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(dfsTree[i].first==v){\r\n-            cout<<dfsTree[i].second;\r\n-            i = i+1;\r\n-            if(dfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686113989949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n \r\n     return bfsTree;\r\n }\r\n \r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n     cout<<\"DFSHelper  : \"<<v<<endl;\r\n     visited[v] = true;\r\n     for(auto x : adj[v]){\r\n         if(!visited[x.first]){\r\n"
                },
                {
                    "date": 1686113996026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n \r\n     return bfsTree;\r\n }\r\n \r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+void DFSHelper(vector<pair<int,double>> &adj[],vector<pair<int,int>> &dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n     cout<<\"DFSHelper  : \"<<v<<endl;\r\n     visited[v] = true;\r\n     for(auto x : adj[v]){\r\n         if(!visited[x.first]){\r\n"
                },
                {
                    "date": 1686114001841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n \r\n     return bfsTree;\r\n }\r\n \r\n-void DFSHelper(vector<pair<int,double>> &adj[],vector<pair<int,int>> &dfsTree,vector<bool> visited,vector<int> parent,int v){\r\n+void DFSHelper(vector<pair<int,double>> &adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> parent,int v){\r\n     cout<<\"DFSHelper  : \"<<v<<endl;\r\n     visited[v] = true;\r\n     for(auto x : adj[v]){\r\n         if(!visited[x.first]){\r\n"
                },
                {
                    "date": 1686114007690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n \r\n     return bfsTree;\r\n }\r\n \r\n-void DFSHelper(vector<pair<int,double>> &adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> parent,int v){\r\n+void DFSHelper(vector<pair<int,double>> &adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n     cout<<\"DFSHelper  : \"<<v<<endl;\r\n     visited[v] = true;\r\n     for(auto x : adj[v]){\r\n         if(!visited[x.first]){\r\n"
                },
                {
                    "date": 1686114013968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n \r\n     return bfsTree;\r\n }\r\n \r\n-void DFSHelper(vector<pair<int,double>> &adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n     cout<<\"DFSHelper  : \"<<v<<endl;\r\n     visited[v] = true;\r\n     for(auto x : adj[v]){\r\n         if(!visited[x.first]){\r\n"
                },
                {
                    "date": 1686114123801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,10 +120,8 @@\n     vector<int>parent(n,-1);\r\n \r\n     DFSHelper(adj,dfsTree,visited,parent,start);\r\n \r\n-    cout<<dfsTree.size()<<endl;\r\n-\r\n     for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n     cout<<endl;\r\n \r\n     return dfsTree;\r\n"
                },
                {
                    "date": 1686114133691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,10 +120,10 @@\n     vector<int>parent(n,-1);\r\n \r\n     DFSHelper(adj,dfsTree,visited,parent,start);\r\n \r\n-    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n \r\n     return dfsTree;\r\n }\r\n \r\n"
                },
                {
                    "date": 1686114143572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,12 +126,25 @@\n \r\n     return dfsTree;\r\n }\r\n \r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n \r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n \r\n+    return dfsTree;\r\n+}\r\n \r\n+\r\n+\r\n+\r\n+\r\n int main(){\r\n \r\n     freopen(\"input.txt\", \"r\", stdin);\r\n     freopen(\"output.txt\", \"w\", stdout);\r\n"
                },
                {
                    "date": 1686114149814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n \r\n     return dfsTree;\r\n }\r\n \r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n,int start){\r\n     vector<pair<int,int>> dfsTree;\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n \r\n"
                },
                {
                    "date": 1686114156204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n \r\n     return dfsTree;\r\n }\r\n \r\n-vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n,int start){\r\n+vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n     vector<pair<int,int>> dfsTree;\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n \r\n"
                },
                {
                    "date": 1686114162834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,8 +131,10 @@\n     vector<pair<int,int>> dfsTree;\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n \r\n+    \r\n+\r\n     DFSHelper(adj,dfsTree,visited,parent,start);\r\n \r\n     // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n     // cout<<endl;\r\n"
                },
                {
                    "date": 1686114170402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,11 @@\n     vector<pair<int,int>> dfsTree;\r\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n \r\n-    \r\n+    for(int i=0;i<n;i++){\r\n+        if(!)\r\n+    }\r\n \r\n     DFSHelper(adj,dfsTree,visited,parent,start);\r\n \r\n     // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n"
                },
                {
                    "date": 1686114177666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n+    cout<<\"DFSHelper  : \"<<v<<endl;\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i])\r\n+    }\r\n+\r\n+    \r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n+    \r\n+    cout<<\"DFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<dfsTree.size();i++){\r\n+        int v = dfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(dfsTree[i].first==v){\r\n+            cout<<dfsTree[i].second;\r\n+            i = i+1;\r\n+            if(dfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686114192863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n+    cout<<\"DFSHelper  : \"<<v<<endl;\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i])DFSHelper(adj,dfsTree,visited,parent,I);\r\n+    }\r\n+\r\n+    \r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n+    \r\n+    cout<<\"DFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<dfsTree.size();i++){\r\n+        int v = dfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(dfsTree[i].first==v){\r\n+            cout<<dfsTree[i].second;\r\n+            i = i+1;\r\n+            if(dfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686114200844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,15 +132,15 @@\n     vector<bool>visited(n,false);\r\n     vector<int>parent(n,-1);\r\n \r\n     for(int i=0;i<n;i++){\r\n-        if(!visited[i])DFSHelper(adj,dfsTree,visited,parent,I);\r\n+        if(!visited[i])DFSHelper(adj,dfsTree,visited,parent,i);\r\n     }\r\n \r\n     \r\n \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n+    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    cout<<endl;\r\n \r\n     return dfsTree;\r\n }\r\n \r\n@@ -217,447 +217,5 @@\n     }\r\n \r\n \r\n     delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n-    cout<<\"DFSHelper  : \"<<v<<endl;\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i])\r\n-    }\r\n-\r\n-    \r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n-    \r\n-    cout<<\"DFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<dfsTree.size();i++){\r\n-        int v = dfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(dfsTree[i].first==v){\r\n-            cout<<dfsTree[i].second;\r\n-            i = i+1;\r\n-            if(dfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n-    cout<<\"DFSHelper  : \"<<v<<endl;\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!)\r\n-    }\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n-    \r\n-    cout<<\"DFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<dfsTree.size();i++){\r\n-        int v = dfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(dfsTree[i].first==v){\r\n-            cout<<dfsTree[i].second;\r\n-            i = i+1;\r\n-            if(dfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686114226264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n+    cout<<\"DFSHelper  : \"<<v<<endl;\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i])DFSHelper(adj,dfsTree,visited,parent,i);\r\n+    }\r\n+\r\n+    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n+    \r\n+    cout<<\"DFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<dfsTree.size();i++){\r\n+        int v = dfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(dfsTree[i].first==v){\r\n+            cout<<dfsTree[i].second;\r\n+            i = i+1;\r\n+            if(dfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    \r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686114237432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,237 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n+    cout<<\"DFSHelper  : \"<<v<<endl;\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i])DFSHelper(adj,dfsTree,visited,parent,i);\r\n+    }\r\n+\r\n+    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n+    \r\n+    cout<<\"DFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<dfsTree.size();i++){\r\n+        int v = dfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(dfsTree[i].first==v){\r\n+            cout<<dfsTree[i].second;\r\n+            i = i+1;\r\n+            if(dfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686114244018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,237 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n+    cout<<\"DFSHelper  : \"<<v<<endl;\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i])DFSHelper(adj,dfsTree,visited,parent,i);\r\n+    }\r\n+\r\n+    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n+    \r\n+    cout<<\"DFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<dfsTree.size();i++){\r\n+        int v = dfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(dfsTree[i].first==v){\r\n+            cout<<dfsTree[i].second;\r\n+            i = i+1;\r\n+            if(dfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"DFS all :\\n\";\r\n+\r\n+    for(int i=0;i<dfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686114251106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,237 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n+    cout<<\"DFSHelper  : \"<<v<<endl;\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i])DFSHelper(adj,dfsTree,visited,parent,i);\r\n+    }\r\n+\r\n+    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n+    \r\n+    cout<<\"DFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<dfsTree.size();i++){\r\n+        int v = dfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(dfsTree[i].first==v){\r\n+            cout<<dfsTree[i].second;\r\n+            i = i+1;\r\n+            if(dfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> dfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"DFS all :\\n\";\r\n+\r\n+    for(int i=0;i<dfsAll.size();i++){\r\n+        int v = fsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686114258429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,237 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n+    cout<<\"DFSHelper  : \"<<v<<endl;\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i])DFSHelper(adj,dfsTree,visited,parent,i);\r\n+    }\r\n+\r\n+    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n+    \r\n+    cout<<\"DFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<dfsTree.size();i++){\r\n+        int v = dfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(dfsTree[i].first==v){\r\n+            cout<<dfsTree[i].second;\r\n+            i = i+1;\r\n+            if(dfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> dfsAll = DFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"DFS all :\\n\";\r\n+\r\n+    for(int i=0;i<dfsAll.size();i++){\r\n+        int v = dfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686114264515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,237 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(auto x:adj[u]){\r\n+        if(x.first==v){\r\n+            return x.second;\r\n+        }\r\n+    }\r\n+    return INFINITY;\t\r\n+}\r\n+\r\n+void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n+    for(int i=0;i<adj[u].size();i++){\r\n+        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n+    }\r\n+}\r\n+\r\n+void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n+    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n+    else{\r\n+        rmEdge(adj,u,v);\r\n+        adj[u].push_back({v,w});\r\n+    }\r\n+}\r\n+\r\n+void print(vector<pair<int,double>> adj[],int n){\r\n+    for(int i=0;i<n;i++){\r\n+        cout<<i<<\" -> \";\r\n+        for(auto x:adj[i]){\r\n+            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n+        }\r\n+        cout<<endl;\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    dist[start] = 0;\r\n+    queue<int>q;\r\n+    q.push(start);\r\n+    visited[start] = true;\r\n+    while(!q.empty()){\r\n+        int v = q.front();\r\n+        q.pop();\r\n+        for(auto x:adj[v]){\r\n+            if(!visited[x.first]){\r\n+                q.push(x.first);\r\n+                parent[x.first] = v;\r\n+                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                bfsTree.push_back({v,x.first});\r\n+                visited[x.first] = true;\r\n+            }\r\n+        }\r\n+    }\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n+    vector<pair<int,int>>bfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+    vector<double>dist(n,INFINITY);\r\n+    queue<int>q;\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i]){\r\n+            dist[i] = 0;\r\n+            q.push(i);\r\n+            visited[i] = true;\r\n+            while(!q.empty()){\r\n+                int v = q.front();\r\n+                q.pop();\r\n+                for(auto x:adj[v]){\r\n+                    if(!visited[x.first]){\r\n+                        q.push(x.first);\r\n+                        parent[x.first] = v;\r\n+                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n+                        bfsTree.push_back({v,x.first});\r\n+                        visited[x.first] = true;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return bfsTree;\r\n+}\r\n+\r\n+void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n+    cout<<\"DFSHelper  : \"<<v<<endl;\r\n+    visited[v] = true;\r\n+    for(auto x : adj[v]){\r\n+        if(!visited[x.first]){\r\n+            dfsTree.push_back({v,x.first});\r\n+            parent[x.first] = v;\r\n+            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    DFSHelper(adj,dfsTree,visited,parent,start);\r\n+\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n+    vector<pair<int,int>> dfsTree;\r\n+    vector<bool>visited(n,false);\r\n+    vector<int>parent(n,-1);\r\n+\r\n+    for(int i=0;i<n;i++){\r\n+        if(!visited[i])DFSHelper(adj,dfsTree,visited,parent,i);\r\n+    }\r\n+\r\n+    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    cout<<endl;\r\n+\r\n+    return dfsTree;\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+int main(){\r\n+\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+\r\n+    int n,m,start;\r\n+    cin>>n>>m;\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    for(int i=0;i<m;i++){\r\n+        int u,v;\r\n+        double w;\r\n+        cin>>u>>v>>w;\r\n+        addEdge(adj,u,v,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    cin>>start;\r\n+\r\n+    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n+    \r\n+    cout<<\"BFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<bfsTree.size();i++){\r\n+        int v = bfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsTree[i].first==v){\r\n+            cout<<bfsTree[i].second;\r\n+            i = i+1;\r\n+            if(bfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"BFS all :\\n\";\r\n+\r\n+    for(int i=0;i<bfsAll.size();i++){\r\n+        int v = bfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(bfsAll[i].first==v){\r\n+            cout<<bfsAll[i].second;\r\n+            i = i+1;\r\n+            if(bfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n+    \r\n+    cout<<\"DFS Tree : \\n\";\r\n+\r\n+    for(int i=0;i<dfsTree.size();i++){\r\n+        int v = dfsTree[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(dfsTree[i].first==v){\r\n+            cout<<dfsTree[i].second;\r\n+            i = i+1;\r\n+            if(dfsTree[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+    vector<pair<int,int>> dfsAll = DFSAll(adj,n);\r\n+    \r\n+\r\n+    cout<<\"DFS all :\\n\";\r\n+\r\n+    for(int i=0;i<dfsAll.size();i++){\r\n+        int v = dfsAll[i].first;\r\n+        cout<<v<<\" -> \";\r\n+        while(dfsAll[i].first==v){\r\n+            cout<<dfsAll[i].second;\r\n+            i = i+1;\r\n+            if(dfsAll[i].first == v)cout<<\",\";\r\n+        }\r\n+        i--;\r\n+        cout<<endl;\r\n+    }\r\n+\r\n+\r\n+\r\n+    delete[]adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686114301594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,8 @@\n     return bfsTree;\r\n }\r\n \r\n void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n-    cout<<\"DFSHelper  : \"<<v<<endl;\r\n     visited[v] = true;\r\n     for(auto x : adj[v]){\r\n         if(!visited[x.first]){\r\n             dfsTree.push_back({v,x.first});\r\n@@ -230,1398 +229,6 @@\n         i--;\r\n         cout<<endl;\r\n     }\r\n \r\n-\r\n-\r\n     delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n-    cout<<\"DFSHelper  : \"<<v<<endl;\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i])DFSHelper(adj,dfsTree,visited,parent,i);\r\n-    }\r\n-\r\n-    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n-    \r\n-    cout<<\"DFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<dfsTree.size();i++){\r\n-        int v = dfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(dfsTree[i].first==v){\r\n-            cout<<dfsTree[i].second;\r\n-            i = i+1;\r\n-            if(dfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> dfsAll = DFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"DFS all :\\n\";\r\n-\r\n-    for(int i=0;i<dfsAll.size();i++){\r\n-        int v = dfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n-    cout<<\"DFSHelper  : \"<<v<<endl;\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i])DFSHelper(adj,dfsTree,visited,parent,i);\r\n-    }\r\n-\r\n-    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n-    \r\n-    cout<<\"DFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<dfsTree.size();i++){\r\n-        int v = dfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(dfsTree[i].first==v){\r\n-            cout<<dfsTree[i].second;\r\n-            i = i+1;\r\n-            if(dfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> dfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"DFS all :\\n\";\r\n-\r\n-    for(int i=0;i<dfsAll.size();i++){\r\n-        int v = fsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n-    cout<<\"DFSHelper  : \"<<v<<endl;\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i])DFSHelper(adj,dfsTree,visited,parent,i);\r\n-    }\r\n-\r\n-    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n-    \r\n-    cout<<\"DFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<dfsTree.size();i++){\r\n-        int v = dfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(dfsTree[i].first==v){\r\n-            cout<<dfsTree[i].second;\r\n-            i = i+1;\r\n-            if(dfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"DFS all :\\n\";\r\n-\r\n-    for(int i=0;i<dfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n-    cout<<\"DFSHelper  : \"<<v<<endl;\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i])DFSHelper(adj,dfsTree,visited,parent,i);\r\n-    }\r\n-\r\n-    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n-    \r\n-    cout<<\"DFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<dfsTree.size();i++){\r\n-        int v = dfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(dfsTree[i].first==v){\r\n-            cout<<dfsTree[i].second;\r\n-            i = i+1;\r\n-            if(dfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n-    cout<<\"DFSHelper  : \"<<v<<endl;\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i])DFSHelper(adj,dfsTree,visited,parent,i);\r\n-    }\r\n-\r\n-    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n-    \r\n-    cout<<\"DFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<dfsTree.size();i++){\r\n-        int v = dfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(dfsTree[i].first==v){\r\n-            cout<<dfsTree[i].second;\r\n-            i = i+1;\r\n-            if(dfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    \r\n-\r\n-\r\n-    delete[]adj;\r\n-}\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-double edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(auto x:adj[u]){\r\n-        if(x.first==v){\r\n-            return x.second;\r\n-        }\r\n-    }\r\n-    return INFINITY;\t\r\n-}\r\n-\r\n-void rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n-    for(int i=0;i<adj[u].size();i++){\r\n-        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n-    }\r\n-}\r\n-\r\n-void addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n-    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n-    else{\r\n-        rmEdge(adj,u,v);\r\n-        adj[u].push_back({v,w});\r\n-    }\r\n-}\r\n-\r\n-void print(vector<pair<int,double>> adj[],int n){\r\n-    for(int i=0;i<n;i++){\r\n-        cout<<i<<\" -> \";\r\n-        for(auto x:adj[i]){\r\n-            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n-        }\r\n-        cout<<endl;\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    dist[start] = 0;\r\n-    queue<int>q;\r\n-    q.push(start);\r\n-    visited[start] = true;\r\n-    while(!q.empty()){\r\n-        int v = q.front();\r\n-        q.pop();\r\n-        for(auto x:adj[v]){\r\n-            if(!visited[x.first]){\r\n-                q.push(x.first);\r\n-                parent[x.first] = v;\r\n-                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                bfsTree.push_back({v,x.first});\r\n-                visited[x.first] = true;\r\n-            }\r\n-        }\r\n-    }\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n-    vector<pair<int,int>>bfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-    vector<double>dist(n,INFINITY);\r\n-    queue<int>q;\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i]){\r\n-            dist[i] = 0;\r\n-            q.push(i);\r\n-            visited[i] = true;\r\n-            while(!q.empty()){\r\n-                int v = q.front();\r\n-                q.pop();\r\n-                for(auto x:adj[v]){\r\n-                    if(!visited[x.first]){\r\n-                        q.push(x.first);\r\n-                        parent[x.first] = v;\r\n-                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n-                        bfsTree.push_back({v,x.first});\r\n-                        visited[x.first] = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    \r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return bfsTree;\r\n-}\r\n-\r\n-void DFSHelper(vector<pair<int,double>> adj[],vector<pair<int,int>> &dfsTree,vector<bool> &visited,vector<int> &parent,int v){\r\n-    cout<<\"DFSHelper  : \"<<v<<endl;\r\n-    visited[v] = true;\r\n-    for(auto x : adj[v]){\r\n-        if(!visited[x.first]){\r\n-            dfsTree.push_back({v,x.first});\r\n-            parent[x.first] = v;\r\n-            DFSHelper(adj,dfsTree,visited,parent,x.first);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSTraversal(vector<pair<int,double>> adj[],int n,int start){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    DFSHelper(adj,dfsTree,visited,parent,start);\r\n-\r\n-    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    // cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-vector<pair<int,int>> DFSAll(vector<pair<int,double>> adj[],int n){\r\n-    vector<pair<int,int>> dfsTree;\r\n-    vector<bool>visited(n,false);\r\n-    vector<int>parent(n,-1);\r\n-\r\n-    for(int i=0;i<n;i++){\r\n-        if(!visited[i])DFSHelper(adj,dfsTree,visited,parent,i);\r\n-    }\r\n-\r\n-    \r\n-\r\n-    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    cout<<endl;\r\n-\r\n-    return dfsTree;\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-int main(){\r\n-\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-\r\n-    int n,m,start;\r\n-    cin>>n>>m;\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    for(int i=0;i<m;i++){\r\n-        int u,v;\r\n-        double w;\r\n-        cin>>u>>v>>w;\r\n-        addEdge(adj,u,v,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    cin>>start;\r\n-\r\n-    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n-    \r\n-    cout<<\"BFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<bfsTree.size();i++){\r\n-        int v = bfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsTree[i].first==v){\r\n-            cout<<bfsTree[i].second;\r\n-            i = i+1;\r\n-            if(bfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n-    \r\n-\r\n-    cout<<\"BFS all :\\n\";\r\n-\r\n-    for(int i=0;i<bfsAll.size();i++){\r\n-        int v = bfsAll[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(bfsAll[i].first==v){\r\n-            cout<<bfsAll[i].second;\r\n-            i = i+1;\r\n-            if(bfsAll[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-    vector<pair<int,int>> dfsTree = DFSTraversal(adj,n,start);\r\n-    \r\n-    cout<<\"DFS Tree : \\n\";\r\n-\r\n-    for(int i=0;i<dfsTree.size();i++){\r\n-        int v = dfsTree[i].first;\r\n-        cout<<v<<\" -> \";\r\n-        while(dfsTree[i].first==v){\r\n-            cout<<dfsTree[i].second;\r\n-            i = i+1;\r\n-            if(dfsTree[i].first == v)cout<<\",\";\r\n-        }\r\n-        i--;\r\n-        cout<<endl;\r\n-    }\r\n-\r\n-\r\n-    delete[]adj;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686115621504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,10 +134,10 @@\n     for(int i=0;i<n;i++){\r\n         if(!visited[i])DFSHelper(adj,dfsTree,visited,parent,i);\r\n     }\r\n \r\n-    for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n-    cout<<endl;\r\n+    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n+    // cout<<endl;\r\n \r\n     return dfsTree;\r\n }\r\n \r\n"
                },
                {
                    "date": 1686115631445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,13 +139,8 @@\n     // cout<<endl;\r\n \r\n     return dfsTree;\r\n }\r\n-\r\n-\r\n-\r\n-\r\n-\r\n int main(){\r\n \r\n     freopen(\"input.txt\", \"r\", stdin);\r\n     freopen(\"output.txt\", \"w\", stdout);\r\n"
                }
            ],
            "date": 1686106805048,
            "name": "Commit-0",
            "content": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\ndouble edgeWeight(vector<pair<int,double>> adj[],int u,int v){\r\n    for(auto x:adj[u]){\r\n        if(x.first==v){\r\n            return x.second;\r\n        }\r\n    }\r\n    return INFINITY;\t\r\n}\r\n\r\nvoid rmEdge(vector<pair<int,double>> adj[],int u,int v){\r\n    for(int i=0;i<adj[u].size();i++){\r\n        if(adj[u][i].first == v)adj[u].erase(adj[u].begin()+i);\r\n    }\r\n}\r\n\r\nvoid addEdge(vector<pair<int,double>> adj[],int u,int v,double w){\r\n    if(edgeWeight(adj,u,v) == INFINITY)adj[u].push_back({v,w});\r\n    else{\r\n        rmEdge(adj,u,v);\r\n        adj[u].push_back({v,w});\r\n    }\r\n}\r\n\r\nvoid print(vector<pair<int,double>> adj[],int n){\r\n    for(int i=0;i<n;i++){\r\n        cout<<i<<\" -> \";\r\n        for(auto x:adj[i]){\r\n            cout<<x.first<<\"(\"<<x.second<<\") \";\r\n        }\r\n        cout<<endl;\r\n    }\r\n}\r\n\r\nvector<pair<int,int>> BFStraversal(vector<pair<int,double>>adj[],int n,int start){\r\n    vector<pair<int,int>>bfsTree;\r\n    vector<bool>visited(n,false);\r\n    vector<int>parent(n,-1);\r\n    vector<double>dist(n,INFINITY);\r\n    dist[start] = 0;\r\n    queue<int>q;\r\n    q.push(start);\r\n    visited[start] = true;\r\n    while(!q.empty()){\r\n        int v = q.front();\r\n        q.pop();\r\n        for(auto x:adj[v]){\r\n            if(!visited[x.first]){\r\n                q.push(x.first);\r\n                parent[x.first] = v;\r\n                dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n                bfsTree.push_back({v,x.first});\r\n                visited[x.first] = true;\r\n            }\r\n        }\r\n    }\r\n    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n    // cout<<endl;\r\n    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n    // cout<<endl;\r\n\r\n    return bfsTree;\r\n}\r\n\r\nvector<pair<int,int>> BFSAll(vector<pair<int,double>>adj[],int n){\r\n    vector<pair<int,int>>bfsTree;\r\n    vector<bool>visited(n,false);\r\n    vector<int>parent(n,-1);\r\n    vector<double>dist(n,INFINITY);\r\n    queue<int>q;\r\n\r\n    for(int i=0;i<n;i++){\r\n        if(!visited[i]){\r\n            dist[i] = 0;\r\n            q.push(i);\r\n            visited[i] = true;\r\n            while(!q.empty()){\r\n                int v = q.front();\r\n                q.pop();\r\n                for(auto x:adj[v]){\r\n                    if(!visited[x.first]){\r\n                        q.push(x.first);\r\n                        parent[x.first] = v;\r\n                        dist[x.first] = dist[v] + edgeWeight(adj,v,x.first);\r\n                        bfsTree.push_back({v,x.first});\r\n                        visited[x.first] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    \r\n    // for(int i=0;i<n;i++)cout<<parent[i]<<\" \";\r\n    // cout<<endl;\r\n    // for(int i=0;i<n;i++)cout<<dist[i]<<\" \";\r\n    // cout<<endl;\r\n\r\n    return bfsTree;\r\n}\r\n\r\nvector<\r\n\r\n\r\n\r\nint main(){\r\n\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n\r\n\r\n    int n,m,start;\r\n    cin>>n>>m;\r\n    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n    for(int i=0;i<m;i++){\r\n        int u,v;\r\n        double w;\r\n        cin>>u>>v>>w;\r\n        addEdge(adj,u,v,w);\r\n    }\r\n    print(adj,n);\r\n\r\n    cin>>start;\r\n\r\n    vector<pair<int,int>> bfsTree = BFStraversal(adj,n,start);\r\n    \r\n    cout<<\"BFS Tree : \\n\";\r\n\r\n    for(int i=0;i<bfsTree.size();i++){\r\n        int v = bfsTree[i].first;\r\n        cout<<v<<\" -> \";\r\n        while(bfsTree[i].first==v){\r\n            cout<<bfsTree[i].second;\r\n            i = i+1;\r\n            if(bfsTree[i].first == v)cout<<\",\";\r\n        }\r\n        i--;\r\n        cout<<endl;\r\n    }\r\n\r\n    vector<pair<int,int>> bfsAll = BFSAll(adj,n);\r\n    \r\n\r\n    cout<<\"BFS all :\\n\";\r\n\r\n    for(int i=0;i<bfsAll.size();i++){\r\n        int v = bfsAll[i].first;\r\n        cout<<v<<\" -> \";\r\n        while(bfsAll[i].first==v){\r\n            cout<<bfsAll[i].second;\r\n            i = i+1;\r\n            if(bfsAll[i].first == v)cout<<\",\";\r\n        }\r\n        i--;\r\n        cout<<endl;\r\n    }\r\n\r\n\r\n    delete[]adj;\r\n}"
        }
    ]
}