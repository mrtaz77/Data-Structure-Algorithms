{
    "sourceFile": "CPP/Graph/MSTOffline/Kruskal.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 38,
            "patches": [
                {
                    "date": 1686140706761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1686140712432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+\r\n int main()\r\n {\r\n     freopen(\"input.txt\", \"r\", stdin);\r\n     freopen(\"output.txt\", \"w\", stdout);\r\n"
                },
                {
                    "date": 1686140717865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-\r\n+#incl\r\n int main()\r\n {\r\n     freopen(\"input.txt\", \"r\", stdin);\r\n     freopen(\"output.txt\", \"w\", stdout);\r\n"
                },
                {
                    "date": 1686140724179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n-#incl\r\n+#include<bits/stdc++.h>\r\n+\r\n int main()\r\n {\r\n     freopen(\"input.txt\", \"r\", stdin);\r\n     freopen(\"output.txt\", \"w\", stdout);\r\n"
                },
                {
                    "date": 1686140731537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,68 @@\n+#include<bits/stdc++.h>\r\n+#include\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n+        addEdge(temp,v,u,min_weight);\r\n+        addEdge(temp,u,v,min_weight);\r\n+    }\r\n+    print(adj,n);\r\n+    print(temp,n);\r\n+\r\n+    cout<<\"============================\\n\";\r\n+\r\n+    vector<pair<int,pair<int,double>>> prim_mst = primMST(temp,n);\r\n+    double cost = 0.0;\r\n+\r\n+    cout<<\"List of edges selected by Prim's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < prim_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = prim_mst[i].first;\r\n+        v = prim_mst[i].second.first;\r\n+        w = prim_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    cout<<\"============================\\n\";\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+    cost = 0.0;\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+    delete[] temp;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686140739763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,69 @@\n+#include<bits/stdc++.h>\r\n+#include\"Disjoint.h\"\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n+        addEdge(temp,v,u,min_weight);\r\n+        addEdge(temp,u,v,min_weight);\r\n+    }\r\n+    print(adj,n);\r\n+    print(temp,n);\r\n+\r\n+    cout<<\"============================\\n\";\r\n+\r\n+    vector<pair<int,pair<int,double>>> prim_mst = primMST(temp,n);\r\n+    double cost = 0.0;\r\n+\r\n+    cout<<\"List of edges selected by Prim's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < prim_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = prim_mst[i].first;\r\n+        v = prim_mst[i].second.first;\r\n+        w = prim_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    cout<<\"============================\\n\";\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+    cost = 0.0;\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+    delete[] temp;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686140745476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,69 @@\n+#include<bits/stdc++.h>\r\n+#include\"Disjoint.h\"\r\n+#include\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n+        addEdge(temp,v,u,min_weight);\r\n+        addEdge(temp,u,v,min_weight);\r\n+    }\r\n+    print(adj,n);\r\n+    print(temp,n);\r\n+\r\n+    cout<<\"============================\\n\";\r\n+\r\n+    vector<pair<int,pair<int,double>>> prim_mst = primMST(temp,n);\r\n+    double cost = 0.0;\r\n+\r\n+    cout<<\"List of edges selected by Prim's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < prim_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = prim_mst[i].first;\r\n+        v = prim_mst[i].second.first;\r\n+        w = prim_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    cout<<\"============================\\n\";\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+    cost = 0.0;\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+    delete[] temp;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686140751449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,69 @@\n+#include<bits/stdc++.h>\r\n+#include\"Disjoint.h\"\r\n+#include\"GraphUtil.h\"\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n+        addEdge(temp,v,u,min_weight);\r\n+        addEdge(temp,u,v,min_weight);\r\n+    }\r\n+    print(adj,n);\r\n+    print(temp,n);\r\n+\r\n+    cout<<\"============================\\n\";\r\n+\r\n+    vector<pair<int,pair<int,double>>> prim_mst = primMST(temp,n);\r\n+    double cost = 0.0;\r\n+\r\n+    cout<<\"List of edges selected by Prim's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < prim_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = prim_mst[i].first;\r\n+        v = prim_mst[i].second.first;\r\n+        w = prim_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    cout<<\"============================\\n\";\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+    cost = 0.0;\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+    delete[] temp;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686140764814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n+        addEdge(temp,v,u,min_weight);\r\n+        addEdge(temp,u,v,min_weight);\r\n+    }\r\n+    print(adj,n);\r\n+    print(temp,n);\r\n+\r\n+    cout<<\"============================\\n\";\r\n+\r\n+    vector<pair<int,pair<int,double>>> prim_mst = primMST(temp,n);\r\n+    double cost = 0.0;\r\n+\r\n+    cout<<\"List of edges selected by Prim's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < prim_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = prim_mst[i].first;\r\n+        v = prim_mst[i].second.first;\r\n+        w = prim_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    cout<<\"============================\\n\";\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+    cost = 0.0;\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+    delete[] temp;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686140786457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n+        addEdge(temp,v,u,min_weight);\r\n+        addEdge(temp,u,v,min_weight);\r\n+    }\r\n+    print(adj,n);\r\n+    print(temp,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+    cost = 0.0;\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+    delete[] temp;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686140800863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n+        addEdge(temp,v,u,min_weight);\r\n+        addEdge(temp,u,v,min_weight);\r\n+    }\r\n+    print(adj,n);\r\n+    print(temp,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+    cost = 0.0;\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+    delete[] temp;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686140823996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,51 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n+        addEdge(temp,v,u,min_weight);\r\n+        addEdge(temp,u,v,min_weight);\r\n+    }\r\n+    print(adj,n);\r\n+    print(temp,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+    cost = 0.0;\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+    delete[] temp;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686140842813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,231 +2,43 @@\n #include\"DisjointSet.h\"\r\n #include\"GraphUtil.h\"\r\n using namespace std;\r\n \r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n \r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n-        addEdge(temp,v,u,min_weight);\r\n-        addEdge(temp,u,v,min_weight);\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n     }\r\n-    print(adj,n);\r\n-    print(temp,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-    cost = 0.0;\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n     \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n+    sort(edges.begin(),edges.end());\r\n \r\n-    delete[] adj;\r\n-    delete[] temp;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n-        addEdge(temp,v,u,min_weight);\r\n-        addEdge(temp,u,v,min_weight);\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n     }\r\n-    print(adj,n);\r\n-    print(temp,n);\r\n \r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-    cost = 0.0;\r\n+    return mst;\r\n+}\r\n \r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-    delete[] temp;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n int main()\r\n {\r\n     freopen(\"input.txt\", \"r\", stdin);\r\n     freopen(\"output.txt\", \"w\", stdout);\r\n \r\n     int n,e;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n-        addEdge(temp,v,u,min_weight);\r\n-        addEdge(temp,u,v,min_weight);\r\n-    }\r\n-    print(adj,n);\r\n-    print(temp,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-    cost = 0.0;\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-    delete[] temp;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n-        addEdge(temp,v,u,min_weight);\r\n-        addEdge(temp,u,v,min_weight);\r\n-    }\r\n-    print(adj,n);\r\n-    print(temp,n);\r\n-\r\n-    cout<<\"============================\\n\";\r\n-\r\n-    vector<pair<int,pair<int,double>>> prim_mst = primMST(temp,n);\r\n     double cost = 0.0;\r\n-\r\n-    cout<<\"List of edges selected by Prim's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < prim_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = prim_mst[i].first;\r\n-        v = prim_mst[i].second.first;\r\n-        w = prim_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    cout<<\"============================\\n\";\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-    cost = 0.0;\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-    delete[] temp;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"Disjoint.h\"\r\n-#include\"GraphUtil.h\"\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n     cin >> n >> e;\r\n \r\n     vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n     vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n@@ -242,30 +54,8 @@\n     }\r\n     print(adj,n);\r\n     print(temp,n);\r\n \r\n-    cout<<\"============================\\n\";\r\n-\r\n-    vector<pair<int,pair<int,double>>> prim_mst = primMST(temp,n);\r\n-    double cost = 0.0;\r\n-\r\n-    cout<<\"List of edges selected by Prim's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < prim_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = prim_mst[i].first;\r\n-        v = prim_mst[i].second.first;\r\n-        w = prim_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    cout<<\"============================\\n\";\r\n-\r\n     vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n     cost = 0.0;\r\n \r\n     cout<<\"List of edges selected by Kruskal's: {\";\r\n@@ -284,279 +74,5 @@\n     cout<<\"Cost: \"<<cost<<endl;\r\n \r\n     delete[] adj;\r\n     delete[] temp;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"Disjoint.h\"\r\n-#include\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n-        addEdge(temp,v,u,min_weight);\r\n-        addEdge(temp,u,v,min_weight);\r\n-    }\r\n-    print(adj,n);\r\n-    print(temp,n);\r\n-\r\n-    cout<<\"============================\\n\";\r\n-\r\n-    vector<pair<int,pair<int,double>>> prim_mst = primMST(temp,n);\r\n-    double cost = 0.0;\r\n-\r\n-    cout<<\"List of edges selected by Prim's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < prim_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = prim_mst[i].first;\r\n-        v = prim_mst[i].second.first;\r\n-        w = prim_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    cout<<\"============================\\n\";\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-    cost = 0.0;\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-    delete[] temp;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"Disjoint.h\"\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n-        addEdge(temp,v,u,min_weight);\r\n-        addEdge(temp,u,v,min_weight);\r\n-    }\r\n-    print(adj,n);\r\n-    print(temp,n);\r\n-\r\n-    cout<<\"============================\\n\";\r\n-\r\n-    vector<pair<int,pair<int,double>>> prim_mst = primMST(temp,n);\r\n-    double cost = 0.0;\r\n-\r\n-    cout<<\"List of edges selected by Prim's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < prim_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = prim_mst[i].first;\r\n-        v = prim_mst[i].second.first;\r\n-        w = prim_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    cout<<\"============================\\n\";\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-    cost = 0.0;\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-    delete[] temp;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n-        addEdge(temp,v,u,min_weight);\r\n-        addEdge(temp,u,v,min_weight);\r\n-    }\r\n-    print(adj,n);\r\n-    print(temp,n);\r\n-\r\n-    cout<<\"============================\\n\";\r\n-\r\n-    vector<pair<int,pair<int,double>>> prim_mst = primMST(temp,n);\r\n-    double cost = 0.0;\r\n-\r\n-    cout<<\"List of edges selected by Prim's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < prim_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = prim_mst[i].first;\r\n-        v = prim_mst[i].second.first;\r\n-        w = prim_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    cout<<\"============================\\n\";\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-    cost = 0.0;\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-    delete[] temp;\r\n-}\n-#include<bits/stdc++.h>\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n-        addEdge(temp,v,u,min_weight);\r\n-        addEdge(temp,u,v,min_weight);\r\n-    }\r\n-    print(adj,n);\r\n-    print(temp,n);\r\n-\r\n-    cout<<\"============================\\n\";\r\n-\r\n-    vector<pair<int,pair<int,double>>> prim_mst = primMST(temp,n);\r\n-    double cost = 0.0;\r\n-\r\n-    cout<<\"List of edges selected by Prim's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < prim_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = prim_mst[i].first;\r\n-        v = prim_mst[i].second.first;\r\n-        w = prim_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    cout<<\"============================\\n\";\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-    cost = 0.0;\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-    delete[] temp;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686140849973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,77 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n+        addEdge(temp,v,u,min_weight);\r\n+        addEdge(temp,u,v,min_weight);\r\n+    }\r\n+    print(adj,n);\r\n+    print(temp,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+    delete[] temp;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686140991100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,77 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+    \r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n+        addEdge(temp,v,u,min_weight);\r\n+        addEdge(temp,u,v,min_weight);\r\n+    }\r\n+    print(adj,n);\r\n+    print(temp,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+    delete[] temp;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141003924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        addEdge(adj,v,w\r\n+    }\r\n+    print(adj,n);\r\n+    print(temp,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+    delete[] temp;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141009632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        addEdge(adj,v,u,w);\r\n+    }\r\n+    print(adj,n);\r\n+    print(temp,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+    delete[] temp;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141030999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,72 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        addEdge(adj,v,u,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141036648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        addEdge(adj,v,u,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141043955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,10 @@\n \r\n     return mst;\r\n }\r\n \r\n+double \r\n \r\n-\r\n int main()\r\n {\r\n     freopen(\"input.txt\", \"r\", stdin);\r\n     freopen(\"output.txt\", \"w\", stdout);\r\n@@ -70,457 +70,5 @@\n     cout<<\"}\\n\";\r\n     cout<<\"Cost: \"<<cost<<endl;\r\n \r\n     delete[] adj;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n-    vector<pair<int,pair<int,double>>> mst;\r\n-    DisjointSet set(n);\r\n-\r\n-    vector<pair<double, pair<int, int>>> edges(e);\r\n-    for (int i = 0; i < n; i++) {\r\n-        for (auto edge : adj[i]) {\r\n-            int u = i;                     \r\n-            int v = edge.first;           \r\n-            double weight = edge.second;   \r\n-            edges.push_back({weight, {u, v}});\r\n-        }\r\n-    }\r\n-    \r\n-    sort(edges.begin(),edges.end());\r\n-\r\n-    for(auto e:edges){\r\n-        int u = e.second.first;\r\n-        int v = e.second.second;\r\n-        if (set.findUp(u) != set.findUp(v)) {\r\n-            mst.push_back({u, {v, e.first}});\r\n-            set.Union(u, v);\r\n-        }\r\n-    }\r\n-\r\n-    return mst;\r\n-}\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    double cost = 0.0;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        addEdge(adj,v,u,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n-    vector<pair<int,pair<int,double>>> mst;\r\n-    DisjointSet set(n);\r\n-\r\n-    vector<pair<double, pair<int, int>>> edges(e);\r\n-    for (int i = 0; i < n; i++) {\r\n-        for (auto edge : adj[i]) {\r\n-            int u = i;                     \r\n-            int v = edge.first;           \r\n-            double weight = edge.second;   \r\n-            edges.push_back({weight, {u, v}});\r\n-        }\r\n-    }\r\n-    \r\n-    sort(edges.begin(),edges.end());\r\n-\r\n-    for(auto e:edges){\r\n-        int u = e.second.first;\r\n-        int v = e.second.second;\r\n-        if (set.findUp(u) != set.findUp(v)) {\r\n-            mst.push_back({u, {v, e.first}});\r\n-            set.Union(u, v);\r\n-        }\r\n-    }\r\n-\r\n-    return mst;\r\n-}\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    double cost = 0.0;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        addEdge(adj,v,u,w);\r\n-    }\r\n-    print(adj,n);\r\n-    print(temp,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-    delete[] temp;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n-    vector<pair<int,pair<int,double>>> mst;\r\n-    DisjointSet set(n);\r\n-\r\n-    vector<pair<double, pair<int, int>>> edges(e);\r\n-    for (int i = 0; i < n; i++) {\r\n-        for (auto edge : adj[i]) {\r\n-            int u = i;                     \r\n-            int v = edge.first;           \r\n-            double weight = edge.second;   \r\n-            edges.push_back({weight, {u, v}});\r\n-        }\r\n-    }\r\n-    \r\n-    sort(edges.begin(),edges.end());\r\n-\r\n-    for(auto e:edges){\r\n-        int u = e.second.first;\r\n-        int v = e.second.second;\r\n-        if (set.findUp(u) != set.findUp(v)) {\r\n-            mst.push_back({u, {v, e.first}});\r\n-            set.Union(u, v);\r\n-        }\r\n-    }\r\n-\r\n-    return mst;\r\n-}\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    double cost = 0.0;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        addEdge(adj,v,w\r\n-    }\r\n-    print(adj,n);\r\n-    print(temp,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-    delete[] temp;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n-    vector<pair<int,pair<int,double>>> mst;\r\n-    DisjointSet set(n);\r\n-\r\n-    vector<pair<double, pair<int, int>>> edges(e);\r\n-    for (int i = 0; i < n; i++) {\r\n-        for (auto edge : adj[i]) {\r\n-            int u = i;                     \r\n-            int v = edge.first;           \r\n-            double weight = edge.second;   \r\n-            edges.push_back({weight, {u, v}});\r\n-        }\r\n-    }\r\n-    \r\n-    sort(edges.begin(),edges.end());\r\n-\r\n-    for(auto e:edges){\r\n-        int u = e.second.first;\r\n-        int v = e.second.second;\r\n-        if (set.findUp(u) != set.findUp(v)) {\r\n-            mst.push_back({u, {v, e.first}});\r\n-            set.Union(u, v);\r\n-        }\r\n-    }\r\n-\r\n-    return mst;\r\n-}\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    double cost = 0.0;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    \r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n-        addEdge(temp,v,u,min_weight);\r\n-        addEdge(temp,u,v,min_weight);\r\n-    }\r\n-    print(adj,n);\r\n-    print(temp,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-    delete[] temp;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n-    vector<pair<int,pair<int,double>>> mst;\r\n-    DisjointSet set(n);\r\n-\r\n-    vector<pair<double, pair<int, int>>> edges(e);\r\n-    for (int i = 0; i < n; i++) {\r\n-        for (auto edge : adj[i]) {\r\n-            int u = i;                     \r\n-            int v = edge.first;           \r\n-            double weight = edge.second;   \r\n-            edges.push_back({weight, {u, v}});\r\n-        }\r\n-    }\r\n-    \r\n-    sort(edges.begin(),edges.end());\r\n-\r\n-    for(auto e:edges){\r\n-        int u = e.second.first;\r\n-        int v = e.second.second;\r\n-        if (set.findUp(u) != set.findUp(v)) {\r\n-            mst.push_back({u, {v, e.first}});\r\n-            set.Union(u, v);\r\n-        }\r\n-    }\r\n-\r\n-    return mst;\r\n-}\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    double cost = 0.0;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n-        addEdge(temp,v,u,min_weight);\r\n-        addEdge(temp,u,v,min_weight);\r\n-    }\r\n-    print(adj,n);\r\n-    print(temp,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-    delete[] temp;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n-    vector<pair<int,pair<int,double>>> mst;\r\n-    DisjointSet set(n);\r\n-\r\n-    vector<pair<double, pair<int, int>>> edges(e);\r\n-    for (int i = 0; i < n; i++) {\r\n-        for (auto edge : adj[i]) {\r\n-            int u = i;                     \r\n-            int v = edge.first;           \r\n-            double weight = edge.second;   \r\n-            edges.push_back({weight, {u, v}});\r\n-        }\r\n-    }\r\n-    \r\n-    sort(edges.begin(),edges.end());\r\n-\r\n-    for(auto e:edges){\r\n-        int u = e.second.first;\r\n-        int v = e.second.second;\r\n-        if (set.findUp(u) != set.findUp(v)) {\r\n-            mst.push_back({u, {v, e.first}});\r\n-            set.Union(u, v);\r\n-        }\r\n-    }\r\n-\r\n-    return mst;\r\n-}\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    double cost = 0.0;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n-        addEdge(temp,v,u,min_weight);\r\n-        addEdge(temp,u,v,min_weight);\r\n-    }\r\n-    print(adj,n);\r\n-    print(temp,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-    cost = 0.0;\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-    delete[] temp;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141052644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \r\n     return mst;\r\n }\r\n \r\n-double \r\n+double mstCost()\r\n \r\n int main()\r\n {\r\n     freopen(\"input.txt\", \"r\", stdin);\r\n"
                },
                {
                    "date": 1686141059117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+double mstCost(vector<<>)\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        addEdge(adj,v,u,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141067583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+double mstCost(vector<pair>)\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        addEdge(adj,v,u,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141076559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+double mstCost(vector<pair<int>>)\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        addEdge(adj,v,u,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141082349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+double mstCost(vector<pair<int,double>> )\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        addEdge(adj,v,u,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141090014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,76 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+double mstCost(vector<pair<int,double>> []adj){\r\n+    \r\n+}\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        addEdge(adj,v,u,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141098756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,76 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+double mstCost(vector<pair<int,double>>adj[]){\r\n+\r\n+}\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        addEdge(adj,v,u,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141144458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+double mstCost(vector<pair<int,double>> adj[]){\r\n+    double cost = 0.0;\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+    \r\n+}\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        addEdge(adj,v,u,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141156666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+double mstCost(vector<pair<int,double>> adj[],int n){\r\n+    double cost = 0.0;\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+}\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        addEdge(adj,v,u,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141182128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+double mstCost(vector<pair<int,double>> adj[],int n,int e){\r\n+    double cost = 0.0;\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+}\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        addEdge(adj,v,u,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141197742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+double mstCost(vector<pair<int,double>> adj[],int n,int e){\r\n+    double cost = 0.0;\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    for(int i = 0; i < kruskal_mst.size(); ++i)\r\n+    {\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+}\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        addEdge(adj,v,u,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141208022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+double mstCost(vector<pair<int,double>> adj[],int n,int e){\r\n+    double cost = 0.0;\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    for(int i = 0; i < kruskal_mst.size(); ++i)cost+=kruskal_mst[i].second.second;\r\n+    {\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+}\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        addEdge(adj,v,u,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141213267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+double mstCost(vector<pair<int,double>> adj[],int n,int e){\r\n+    double cost = 0.0;\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    for(int i = 0; i < kruskal_mst.size(); ++i)cost+=kruskal_mst[i].second.second;\r\n+    \r\n+}\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"output.txt\", \"w\", stdout);\r\n+\r\n+    int n,e;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        addEdge(adj,v,u,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141218519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     double cost = 0.0;\r\n     vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n \r\n     for(int i = 0; i < kruskal_mst.size(); ++i)cost+=kruskal_mst[i].second.second;\r\n-    \r\n+    return cost;\r\n }\r\n \r\n int main()\r\n {\r\n@@ -76,946 +76,5 @@\n     cout<<\"}\\n\";\r\n     cout<<\"Cost: \"<<cost<<endl;\r\n \r\n     delete[] adj;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n-    vector<pair<int,pair<int,double>>> mst;\r\n-    DisjointSet set(n);\r\n-\r\n-    vector<pair<double, pair<int, int>>> edges(e);\r\n-    for (int i = 0; i < n; i++) {\r\n-        for (auto edge : adj[i]) {\r\n-            int u = i;                     \r\n-            int v = edge.first;           \r\n-            double weight = edge.second;   \r\n-            edges.push_back({weight, {u, v}});\r\n-        }\r\n-    }\r\n-    \r\n-    sort(edges.begin(),edges.end());\r\n-\r\n-    for(auto e:edges){\r\n-        int u = e.second.first;\r\n-        int v = e.second.second;\r\n-        if (set.findUp(u) != set.findUp(v)) {\r\n-            mst.push_back({u, {v, e.first}});\r\n-            set.Union(u, v);\r\n-        }\r\n-    }\r\n-\r\n-    return mst;\r\n-}\r\n-\r\n-double mstCost(vector<pair<int,double>> adj[],int n,int e){\r\n-    double cost = 0.0;\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    for(int i = 0; i < kruskal_mst.size(); ++i)cost+=kruskal_mst[i].second.second;\r\n-    {\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-}\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    double cost = 0.0;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        addEdge(adj,v,u,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n-    vector<pair<int,pair<int,double>>> mst;\r\n-    DisjointSet set(n);\r\n-\r\n-    vector<pair<double, pair<int, int>>> edges(e);\r\n-    for (int i = 0; i < n; i++) {\r\n-        for (auto edge : adj[i]) {\r\n-            int u = i;                     \r\n-            int v = edge.first;           \r\n-            double weight = edge.second;   \r\n-            edges.push_back({weight, {u, v}});\r\n-        }\r\n-    }\r\n-    \r\n-    sort(edges.begin(),edges.end());\r\n-\r\n-    for(auto e:edges){\r\n-        int u = e.second.first;\r\n-        int v = e.second.second;\r\n-        if (set.findUp(u) != set.findUp(v)) {\r\n-            mst.push_back({u, {v, e.first}});\r\n-            set.Union(u, v);\r\n-        }\r\n-    }\r\n-\r\n-    return mst;\r\n-}\r\n-\r\n-double mstCost(vector<pair<int,double>> adj[],int n,int e){\r\n-    double cost = 0.0;\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    for(int i = 0; i < kruskal_mst.size(); ++i)\r\n-    {\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-}\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    double cost = 0.0;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        addEdge(adj,v,u,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n-    vector<pair<int,pair<int,double>>> mst;\r\n-    DisjointSet set(n);\r\n-\r\n-    vector<pair<double, pair<int, int>>> edges(e);\r\n-    for (int i = 0; i < n; i++) {\r\n-        for (auto edge : adj[i]) {\r\n-            int u = i;                     \r\n-            int v = edge.first;           \r\n-            double weight = edge.second;   \r\n-            edges.push_back({weight, {u, v}});\r\n-        }\r\n-    }\r\n-    \r\n-    sort(edges.begin(),edges.end());\r\n-\r\n-    for(auto e:edges){\r\n-        int u = e.second.first;\r\n-        int v = e.second.second;\r\n-        if (set.findUp(u) != set.findUp(v)) {\r\n-            mst.push_back({u, {v, e.first}});\r\n-            set.Union(u, v);\r\n-        }\r\n-    }\r\n-\r\n-    return mst;\r\n-}\r\n-\r\n-double mstCost(vector<pair<int,double>> adj[],int n,int e){\r\n-    double cost = 0.0;\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-}\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    double cost = 0.0;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        addEdge(adj,v,u,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n-    vector<pair<int,pair<int,double>>> mst;\r\n-    DisjointSet set(n);\r\n-\r\n-    vector<pair<double, pair<int, int>>> edges(e);\r\n-    for (int i = 0; i < n; i++) {\r\n-        for (auto edge : adj[i]) {\r\n-            int u = i;                     \r\n-            int v = edge.first;           \r\n-            double weight = edge.second;   \r\n-            edges.push_back({weight, {u, v}});\r\n-        }\r\n-    }\r\n-    \r\n-    sort(edges.begin(),edges.end());\r\n-\r\n-    for(auto e:edges){\r\n-        int u = e.second.first;\r\n-        int v = e.second.second;\r\n-        if (set.findUp(u) != set.findUp(v)) {\r\n-            mst.push_back({u, {v, e.first}});\r\n-            set.Union(u, v);\r\n-        }\r\n-    }\r\n-\r\n-    return mst;\r\n-}\r\n-\r\n-double mstCost(vector<pair<int,double>> adj[],int n){\r\n-    double cost = 0.0;\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-}\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    double cost = 0.0;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        addEdge(adj,v,u,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n-    vector<pair<int,pair<int,double>>> mst;\r\n-    DisjointSet set(n);\r\n-\r\n-    vector<pair<double, pair<int, int>>> edges(e);\r\n-    for (int i = 0; i < n; i++) {\r\n-        for (auto edge : adj[i]) {\r\n-            int u = i;                     \r\n-            int v = edge.first;           \r\n-            double weight = edge.second;   \r\n-            edges.push_back({weight, {u, v}});\r\n-        }\r\n-    }\r\n-    \r\n-    sort(edges.begin(),edges.end());\r\n-\r\n-    for(auto e:edges){\r\n-        int u = e.second.first;\r\n-        int v = e.second.second;\r\n-        if (set.findUp(u) != set.findUp(v)) {\r\n-            mst.push_back({u, {v, e.first}});\r\n-            set.Union(u, v);\r\n-        }\r\n-    }\r\n-\r\n-    return mst;\r\n-}\r\n-\r\n-double mstCost(vector<pair<int,double>> adj[]){\r\n-    double cost = 0.0;\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-    \r\n-}\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    double cost = 0.0;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        addEdge(adj,v,u,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n-    vector<pair<int,pair<int,double>>> mst;\r\n-    DisjointSet set(n);\r\n-\r\n-    vector<pair<double, pair<int, int>>> edges(e);\r\n-    for (int i = 0; i < n; i++) {\r\n-        for (auto edge : adj[i]) {\r\n-            int u = i;                     \r\n-            int v = edge.first;           \r\n-            double weight = edge.second;   \r\n-            edges.push_back({weight, {u, v}});\r\n-        }\r\n-    }\r\n-    \r\n-    sort(edges.begin(),edges.end());\r\n-\r\n-    for(auto e:edges){\r\n-        int u = e.second.first;\r\n-        int v = e.second.second;\r\n-        if (set.findUp(u) != set.findUp(v)) {\r\n-            mst.push_back({u, {v, e.first}});\r\n-            set.Union(u, v);\r\n-        }\r\n-    }\r\n-\r\n-    return mst;\r\n-}\r\n-\r\n-double mstCost(vector<pair<int,double>>adj[]){\r\n-\r\n-}\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    double cost = 0.0;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        addEdge(adj,v,u,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n-    vector<pair<int,pair<int,double>>> mst;\r\n-    DisjointSet set(n);\r\n-\r\n-    vector<pair<double, pair<int, int>>> edges(e);\r\n-    for (int i = 0; i < n; i++) {\r\n-        for (auto edge : adj[i]) {\r\n-            int u = i;                     \r\n-            int v = edge.first;           \r\n-            double weight = edge.second;   \r\n-            edges.push_back({weight, {u, v}});\r\n-        }\r\n-    }\r\n-    \r\n-    sort(edges.begin(),edges.end());\r\n-\r\n-    for(auto e:edges){\r\n-        int u = e.second.first;\r\n-        int v = e.second.second;\r\n-        if (set.findUp(u) != set.findUp(v)) {\r\n-            mst.push_back({u, {v, e.first}});\r\n-            set.Union(u, v);\r\n-        }\r\n-    }\r\n-\r\n-    return mst;\r\n-}\r\n-\r\n-double mstCost(vector<pair<int,double>> []adj){\r\n-    \r\n-}\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    double cost = 0.0;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        addEdge(adj,v,u,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n-    vector<pair<int,pair<int,double>>> mst;\r\n-    DisjointSet set(n);\r\n-\r\n-    vector<pair<double, pair<int, int>>> edges(e);\r\n-    for (int i = 0; i < n; i++) {\r\n-        for (auto edge : adj[i]) {\r\n-            int u = i;                     \r\n-            int v = edge.first;           \r\n-            double weight = edge.second;   \r\n-            edges.push_back({weight, {u, v}});\r\n-        }\r\n-    }\r\n-    \r\n-    sort(edges.begin(),edges.end());\r\n-\r\n-    for(auto e:edges){\r\n-        int u = e.second.first;\r\n-        int v = e.second.second;\r\n-        if (set.findUp(u) != set.findUp(v)) {\r\n-            mst.push_back({u, {v, e.first}});\r\n-            set.Union(u, v);\r\n-        }\r\n-    }\r\n-\r\n-    return mst;\r\n-}\r\n-\r\n-double mstCost(vector<pair<int,double>> )\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    double cost = 0.0;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        addEdge(adj,v,u,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n-    vector<pair<int,pair<int,double>>> mst;\r\n-    DisjointSet set(n);\r\n-\r\n-    vector<pair<double, pair<int, int>>> edges(e);\r\n-    for (int i = 0; i < n; i++) {\r\n-        for (auto edge : adj[i]) {\r\n-            int u = i;                     \r\n-            int v = edge.first;           \r\n-            double weight = edge.second;   \r\n-            edges.push_back({weight, {u, v}});\r\n-        }\r\n-    }\r\n-    \r\n-    sort(edges.begin(),edges.end());\r\n-\r\n-    for(auto e:edges){\r\n-        int u = e.second.first;\r\n-        int v = e.second.second;\r\n-        if (set.findUp(u) != set.findUp(v)) {\r\n-            mst.push_back({u, {v, e.first}});\r\n-            set.Union(u, v);\r\n-        }\r\n-    }\r\n-\r\n-    return mst;\r\n-}\r\n-\r\n-double mstCost(vector<pair<int>>)\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    double cost = 0.0;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        addEdge(adj,v,u,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n-    vector<pair<int,pair<int,double>>> mst;\r\n-    DisjointSet set(n);\r\n-\r\n-    vector<pair<double, pair<int, int>>> edges(e);\r\n-    for (int i = 0; i < n; i++) {\r\n-        for (auto edge : adj[i]) {\r\n-            int u = i;                     \r\n-            int v = edge.first;           \r\n-            double weight = edge.second;   \r\n-            edges.push_back({weight, {u, v}});\r\n-        }\r\n-    }\r\n-    \r\n-    sort(edges.begin(),edges.end());\r\n-\r\n-    for(auto e:edges){\r\n-        int u = e.second.first;\r\n-        int v = e.second.second;\r\n-        if (set.findUp(u) != set.findUp(v)) {\r\n-            mst.push_back({u, {v, e.first}});\r\n-            set.Union(u, v);\r\n-        }\r\n-    }\r\n-\r\n-    return mst;\r\n-}\r\n-\r\n-double mstCost(vector<pair>)\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    double cost = 0.0;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        addEdge(adj,v,u,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n-    vector<pair<int,pair<int,double>>> mst;\r\n-    DisjointSet set(n);\r\n-\r\n-    vector<pair<double, pair<int, int>>> edges(e);\r\n-    for (int i = 0; i < n; i++) {\r\n-        for (auto edge : adj[i]) {\r\n-            int u = i;                     \r\n-            int v = edge.first;           \r\n-            double weight = edge.second;   \r\n-            edges.push_back({weight, {u, v}});\r\n-        }\r\n-    }\r\n-    \r\n-    sort(edges.begin(),edges.end());\r\n-\r\n-    for(auto e:edges){\r\n-        int u = e.second.first;\r\n-        int v = e.second.second;\r\n-        if (set.findUp(u) != set.findUp(v)) {\r\n-            mst.push_back({u, {v, e.first}});\r\n-            set.Union(u, v);\r\n-        }\r\n-    }\r\n-\r\n-    return mst;\r\n-}\r\n-\r\n-double mstCost(vector<<>)\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    double cost = 0.0;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        addEdge(adj,v,u,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n-}\n-#include<bits/stdc++.h>\r\n-#include\"DisjointSet.h\"\r\n-#include\"GraphUtil.h\"\r\n-using namespace std;\r\n-\r\n-vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n-    vector<pair<int,pair<int,double>>> mst;\r\n-    DisjointSet set(n);\r\n-\r\n-    vector<pair<double, pair<int, int>>> edges(e);\r\n-    for (int i = 0; i < n; i++) {\r\n-        for (auto edge : adj[i]) {\r\n-            int u = i;                     \r\n-            int v = edge.first;           \r\n-            double weight = edge.second;   \r\n-            edges.push_back({weight, {u, v}});\r\n-        }\r\n-    }\r\n-    \r\n-    sort(edges.begin(),edges.end());\r\n-\r\n-    for(auto e:edges){\r\n-        int u = e.second.first;\r\n-        int v = e.second.second;\r\n-        if (set.findUp(u) != set.findUp(v)) {\r\n-            mst.push_back({u, {v, e.first}});\r\n-            set.Union(u, v);\r\n-        }\r\n-    }\r\n-\r\n-    return mst;\r\n-}\r\n-\r\n-double mstCost()\r\n-\r\n-int main()\r\n-{\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n-    freopen(\"output.txt\", \"w\", stdout);\r\n-\r\n-    int n,e;\r\n-    double cost = 0.0;\r\n-    cin >> n >> e;\r\n-\r\n-    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n-\r\n-    for (int i = 0; i < e; ++i){\r\n-        int u,v;\r\n-        double w;\r\n-        cin >> u >> v >> w;\r\n-        addEdge(adj,u,v,w);\r\n-        addEdge(adj,v,u,w);\r\n-    }\r\n-    print(adj,n);\r\n-\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n-\r\n-    cout<<\"List of edges selected by Kruskal's: {\";\r\n-\r\n-    \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n-        int u,v,w;\r\n-        u = kruskal_mst[i].first;\r\n-        v = kruskal_mst[i].second.first;\r\n-        w = kruskal_mst[i].second.second;\r\n-        cost += w;\r\n-        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n-        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n-    }\r\n-    cout<<\"}\\n\";\r\n-    cout<<\"Cost: \"<<cost<<endl;\r\n-\r\n-    delete[] adj;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686141291805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,15 +30,9 @@\n \r\n     return mst;\r\n }\r\n \r\n-double mstCost(vector<pair<int,double>> adj[],int n,int e){\r\n-    double cost = 0.0;\r\n-    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n \r\n-    for(int i = 0; i < kruskal_mst.size(); ++i)cost+=kruskal_mst[i].second.second;\r\n-    return cost;\r\n-}\r\n \r\n int main()\r\n {\r\n     freopen(\"input.txt\", \"r\", stdin);\r\n"
                },
                {
                    "date": 1686141298431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,15 @@\n \r\n     return mst;\r\n }\r\n \r\n+double mstCost(vector<pair<int,double>> adj[],int n,int e){\r\n+    double cost = 0.0;\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i)cost+=kruskal_mst[i].second.second;\r\n+    return cost;\r\n+}\r\n \r\n int main()\r\n {\r\n     freopen(\"input.txt\", \"r\", stdin);\r\n"
                },
                {
                    "date": 1686141552870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n }\r\n \r\n int main()\r\n {\r\n-    freopen(\"input.txt\", \"r\", stdin);\r\n+    freopen(\"in.txt\", \"r\", stdin);\r\n     freopen(\"output.txt\", \"w\", stdout);\r\n \r\n     int n,e;\r\n     double cost = 0.0;\r\n"
                },
                {
                    "date": 1686141561373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n \r\n int main()\r\n {\r\n     freopen(\"in.txt\", \"r\", stdin);\r\n-    freopen(\".txt\", \"w\", stdout);\r\n+    freopen(\"k.txt\", \"w\", stdout);\r\n \r\n     int n,e;\r\n     double cost = 0.0;\r\n     cin >> n >> e;\r\n"
                },
                {
                    "date": 1686141577970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+#include<bits/stdc++.h>\r\n+#include\"DisjointSet.h\"\r\n+#include\"GraphUtil.h\"\r\n+using namespace std;\r\n+\r\n+vector<pair<int,pair<int,double>>> kruskalMST(vector<pair<int,double>> adj[],int n,int e){\r\n+    vector<pair<int,pair<int,double>>> mst;\r\n+    DisjointSet set(n);\r\n+\r\n+    vector<pair<double, pair<int, int>>> edges(e);\r\n+    for (int i = 0; i < n; i++) {\r\n+        for (auto edge : adj[i]) {\r\n+            int u = i;                     \r\n+            int v = edge.first;           \r\n+            double weight = edge.second;   \r\n+            edges.push_back({weight, {u, v}});\r\n+        }\r\n+    }\r\n+    \r\n+    sort(edges.begin(),edges.end());\r\n+\r\n+    for(auto e:edges){\r\n+        int u = e.second.first;\r\n+        int v = e.second.second;\r\n+        if (set.findUp(u) != set.findUp(v)) {\r\n+            mst.push_back({u, {v, e.first}});\r\n+            set.Union(u, v);\r\n+        }\r\n+    }\r\n+\r\n+    return mst;\r\n+}\r\n+\r\n+double mstCost(vector<pair<int,double>> adj[],int n,int e){\r\n+    double cost = 0.0;\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    for(int i = 0; i < kruskal_mst.size(); ++i)cost+=kruskal_mst[i].second.second;\r\n+    return cost;\r\n+}\r\n+\r\n+int main()\r\n+{\r\n+    freopen(\"in.txt\", \"r\", stdin);\r\n+    freopen(\"kruskal.txt\", \"w\", stdout);\r\n+\r\n+    int n,m;\r\n+    double cost = 0.0;\r\n+    cin >> n >> e;\r\n+\r\n+    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n+\r\n+    for (int i = 0; i < e; ++i){\r\n+        int u,v;\r\n+        double w;\r\n+        cin >> u >> v >> w;\r\n+        addEdge(adj,u,v,w);\r\n+        addEdge(adj,v,u,w);\r\n+    }\r\n+    print(adj,n);\r\n+\r\n+    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n+\r\n+    cout<<\"List of edges selected by Kruskal's: {\";\r\n+\r\n+    \r\n+    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n+        int u,v,w;\r\n+        u = kruskal_mst[i].first;\r\n+        v = kruskal_mst[i].second.first;\r\n+        w = kruskal_mst[i].second.second;\r\n+        cost += w;\r\n+        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n+        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n+    }\r\n+    cout<<\"}\\n\";\r\n+    cout<<\"Cost: \"<<cost<<endl;\r\n+\r\n+    delete[] adj;\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1686140706761,
            "name": "Commit-0",
            "content": "int main()\r\n{\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n\r\n    int n,e;\r\n    cin >> n >> e;\r\n\r\n    vector<pair<int,double>> *adj = new vector<pair<int,double>>[n];\r\n    vector<pair<int,double>> *temp = new vector<pair<int,double>>[n];\r\n\r\n    for (int i = 0; i < e; ++i){\r\n        int u,v;\r\n        double w;\r\n        cin >> u >> v >> w;\r\n        addEdge(adj,u,v,w);\r\n        double min_weight = (w < edgeWeight(adj,v,u)) ? w : edgeWeight(adj,v,u);\r\n        addEdge(temp,v,u,min_weight);\r\n        addEdge(temp,u,v,min_weight);\r\n    }\r\n    print(adj,n);\r\n    print(temp,n);\r\n\r\n    cout<<\"============================\\n\";\r\n\r\n    vector<pair<int,pair<int,double>>> prim_mst = primMST(temp,n);\r\n    double cost = 0.0;\r\n\r\n    cout<<\"List of edges selected by Prim's: {\";\r\n\r\n    \r\n    for(int i = 0; i < prim_mst.size(); ++i){\r\n        int u,v,w;\r\n        u = prim_mst[i].first;\r\n        v = prim_mst[i].second.first;\r\n        w = prim_mst[i].second.second;\r\n        cost += w;\r\n        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n    }\r\n    cout<<\"}\\n\";\r\n    cout<<\"Cost: \"<<cost<<endl;\r\n\r\n    cout<<\"============================\\n\";\r\n\r\n    vector<pair<int,pair<int,double>>> kruskal_mst = kruskalMST(adj,n,e);\r\n    cost = 0.0;\r\n\r\n    cout<<\"List of edges selected by Kruskal's: {\";\r\n\r\n    \r\n    for(int i = 0; i < kruskal_mst.size(); ++i){\r\n        int u,v,w;\r\n        u = kruskal_mst[i].first;\r\n        v = kruskal_mst[i].second.first;\r\n        w = kruskal_mst[i].second.second;\r\n        cost += w;\r\n        if(edgeWeight(adj,u,v) == w)cout<<\"(\"<<u<<\",\"<<v<<\")\";\r\n        else cout<<\"(\"<<v<<\",\"<<u<<\")\"; \r\n    }\r\n    cout<<\"}\\n\";\r\n    cout<<\"Cost: \"<<cost<<endl;\r\n\r\n    delete[] adj;\r\n    delete[] temp;\r\n}"
        }
    ]
}