{
    "sourceFile": "Java/Graph/GraphMat.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 48,
            "patches": [
                {
                    "date": 1685781209362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1685786661831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,11 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        MinHeap<Edge> minheap = new MinHeap<Edge>();\r\n+        \r\n+        \r\n+        \r\n         LL<Edge> mst = new LL<>();\r\n \r\n         minheap.Insert(new Edge(-1,start,0));\r\n \r\n"
                },
                {
                    "date": 1685786670603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import MyListADT.LL;\r\n import Queue.QueueLL;\r\n \r\n import java.util.Arrays;\r\n+import java.util.PriorityQueue;\r\n \r\n public class GraphMat{\r\n     private final double [][] adjMat;\r\n     private int numEdge;\r\n@@ -171,11 +172,11 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n+        PriorityQueue minheap\r\n+\r\n         \r\n-        \r\n-        \r\n         LL<Edge> mst = new LL<>();\r\n \r\n         minheap.Insert(new Edge(-1,start,0));\r\n \r\n"
                },
                {
                    "date": 1685786677312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue minheap\r\n+        PriorityQueue indexedminheap\r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685786700729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue indexedminheap\r\n+        PriorityQueue indexed\r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685786709071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue indexed\r\n+        PriorityQueue indexedPriorityQueue = new PriorityQueue()\r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685786721469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue indexedPriorityQueue = new PriorityQueue()\r\n+        PriorityQueue\r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685786730124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue\r\n+        PriorityQueue<\r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685786735556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue<\r\n+        PriorityQueue<iPaie>\r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685786946367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import MyListADT.LL;\r\n import Queue.QueueLL;\r\n \r\n-import java.util.Arrays;\r\n-import java.util.PriorityQueue;\r\n+import java.util.*;\r\n \r\n public class GraphMat{\r\n     private final double [][] adjMat;\r\n     private int numEdge;\r\n@@ -172,9 +171,9 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue<iPaie>\r\n+        PriorityQueue<iPair>\r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685786979027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue<iPair>\r\n+        PriorityQueue<Pair>\r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685786985458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue<Pair>\r\n+        PriorityQueue<Pair<>\r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685786990671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue<Pair<>\r\n+        PriorityQueue<Pair<Integer,>\r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685787043135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue<Pair<Integer,>\r\n+        PriorityQueue<Pair<Integer,Double>> \r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685787053312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue<Pair<Integer,Double>> \r\n+        PriorityQueue<Pair<Integer,Double>> ipq = \r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685787059683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue<Pair<Integer,Double>> ipq = \r\n+        PriorityQueue<Pair<Integer,Double>> ipq = new \r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685787067275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue<Pair<Integer,Double>> ipq = new \r\n+        PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(num, null)\r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685787074159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(num, null)\r\n+        PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(numVertices)\r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685787079574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(numVertices)\r\n+        PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(numVertices(),new )\r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685787089044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,11 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(numVertices(),new )\r\n+        PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(numVertices(),new Comparator<>() {\r\n+            \r\n+        })\r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685787097258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(numVertices(),new Comparator<>() {\r\n+        PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(numVertices(),new Comparator<Pair<>() {\r\n             \r\n         })\r\n \r\n         \r\n"
                },
                {
                    "date": 1685787106603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(numVertices(),new Comparator<Pair<>() {\r\n+        PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(numVertices(),new Comparator<Pair<Integer,Double>>() {\r\n             \r\n         })\r\n \r\n         \r\n"
                },
                {
                    "date": 1685787119403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n         PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(numVertices(),new Comparator<Pair<Integer,Double>>() {\r\n-            \r\n+            public\r\n         })\r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n"
                },
                {
                    "date": 1685787125267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n         PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(numVertices(),new Comparator<Pair<Integer,Double>>() {\r\n-            public\r\n+            public int compare(Pair<Integer,Double> \r\n         })\r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n"
                },
                {
                    "date": 1685787136151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n         PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(numVertices(),new Comparator<Pair<Integer,Double>>() {\r\n-            public int compare(Pair<Integer,Double> \r\n+            public int compare(Pair<Integer,Double> o1, Pair<Integer,Double> o2) {\r\n         })\r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n"
                },
                {
                    "date": 1685787144860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,10 +172,12 @@\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n         PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(numVertices(),new Comparator<Pair<Integer,Double>>() {\r\n-            public int compare(Pair<Integer,Double> o1, Pair<Integer,Double> o2) {\r\n-        })\r\n+            public int compare(Pair<Integer,Double> o1, Pair<Integer,Double> o2) {\\\r\n+                return o2.getValue().compareTo(o1.getValue());\r\n+    \r\n+        });\r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685787155012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n         PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(numVertices(),new Comparator<Pair<Integer,Double>>() {\r\n-            public int compare(Pair<Integer,Double> o1, Pair<Integer,Double> o2) {\\\r\n+            public int compare(Pair<Integer,Double> o1, Pair<Integer,Double> o2) {\r\n                 return o2.getValue().compareTo(o1.getValue());\r\n     \r\n         });\r\n \r\n"
                },
                {
                    "date": 1685787166680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n \r\n     LL<Edge> MSTPrim(int start){\r\n         PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(numVertices(),new Comparator<Pair<Integer,Double>>() {\r\n             public int compare(Pair<Integer,Double> o1, Pair<Integer,Double> o2) {\r\n-                return o2.getValue().compareTo(o1.getValue());\r\n+                return o1.getValue().compareTo(o1.getValue());\r\n     \r\n         });\r\n \r\n         \r\n"
                },
                {
                    "date": 1685787175270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n \r\n     LL<Edge> MSTPrim(int start){\r\n         PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(numVertices(),new Comparator<Pair<Integer,Double>>() {\r\n             public int compare(Pair<Integer,Double> o1, Pair<Integer,Double> o2) {\r\n-                return o1.getValue().compareTo(o1.getValue());\r\n+                return o1.second.compareTo(o1.getValue());\r\n     \r\n         });\r\n \r\n         \r\n"
                },
                {
                    "date": 1685787185841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n \r\n     LL<Edge> MSTPrim(int start){\r\n         PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(numVertices(),new Comparator<Pair<Integer,Double>>() {\r\n             public int compare(Pair<Integer,Double> o1, Pair<Integer,Double> o2) {\r\n-                return o1.second.compareTo(o1.getValue());\r\n+                return o1.second-o2.second;\r\n     \r\n         });\r\n \r\n         \r\n"
                },
                {
                    "date": 1685787399516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,13 +171,14 @@\n         return false;\r\n     }\r\n \r\n     LL<Edge> MSTPrim(int start){\r\n-        PriorityQueue<Pair<Integer,Double>> ipq = new PriorityQueue<>(numVertices(),new Comparator<Pair<Integer,Double>>() {\r\n-            public int compare(Pair<Integer,Double> o1, Pair<Integer,Double> o2) {\r\n-                return o1.second-o2.second;\r\n-    \r\n+        PriorityQueue<Pair<Integer, Double>> ipq = new PriorityQueue<>(numVertices(), new Comparator<Pair<Integer, Double>>() {\r\n+            public int compare(Pair<Integer, Double> o1, Pair<Integer, Double> o2) {\r\n+                return Double.compare(o1.getSecond(), o2.getSecond());\r\n+            }\r\n         });\r\n+        \r\n \r\n         \r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                },
                {
                    "date": 1685787406640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n \r\n     LL<Edge> MSTPrim(int start){\r\n         PriorityQueue<Pair<Integer, Double>> ipq = new PriorityQueue<>(numVertices(), new Comparator<Pair<Integer, Double>>() {\r\n             public int compare(Pair<Integer, Double> o1, Pair<Integer, Double> o2) {\r\n-                return Double.compare(o1.getSecond(), o2.getSecond());\r\n+                return Double.compare(o1.second(), o2.second());\r\n             }\r\n         });\r\n         \r\n \r\n"
                },
                {
                    "date": 1685787456486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,11 +176,8 @@\n             public int compare(Pair<Integer, Double> o1, Pair<Integer, Double> o2) {\r\n                 return Double.compare(o1.second(), o2.second());\r\n             }\r\n         });\r\n-        \r\n-\r\n-        \r\n         LL<Edge> mst = new LL<>();\r\n \r\n         minheap.Insert(new Edge(-1,start,0));\r\n \r\n"
                },
                {
                    "date": 1685787465303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,20 +180,7 @@\n         LL<Edge> mst = new LL<>();\r\n \r\n         minheap.Insert(new Edge(-1,start,0));\r\n \r\n-        while(minheap.size() > 0){\r\n-            Edge e = minheap.ExtractMin();\r\n-            int v = e.getFinish();\r\n-            if(getvis(v) == 0){\r\n-                setvis(v, 1);\r\n-                if(e.getStart() != -1)mst.pushBack(e);\r\n-                for(int w = first(v); w < numVertices(); w = next(v,w)){\r\n-                    if(getvis(w) == 0){\r\n-                        minheap.Insert(new Edge(v,w,adjMat[v][w]));\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-        return mst;\r\n+        \r\n     }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685787470571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,9 +178,8 @@\n             }\r\n         });\r\n         LL<Edge> mst = new LL<>();\r\n \r\n-        minheap.Insert(new Edge(-1,start,0));\r\n \r\n         \r\n     }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685787477456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,7 +179,7 @@\n         });\r\n         LL<Edge> mst = new LL<>();\r\n \r\n \r\n-        \r\n+        return mst;\r\n     }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685787494643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,9 @@\n                 return Double.compare(o1.second(), o2.second());\r\n             }\r\n         });\r\n         LL<Edge> mst = new LL<>();\r\n+        int keys = \r\n \r\n-\r\n         return mst;\r\n     }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685787499987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,9 @@\n                 return Double.compare(o1.second(), o2.second());\r\n             }\r\n         });\r\n         LL<Edge> mst = new LL<>();\r\n-        int keys = \r\n+        int keys = new int[V]\r\n \r\n         return mst;\r\n     }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685787505283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,10 @@\n                 return Double.compare(o1.second(), o2.second());\r\n             }\r\n         });\r\n         LL<Edge> mst = new LL<>();\r\n-        int keys = new int[V]\r\n+        int keys = new int[V];\r\n+        Arrays\r\n \r\n         return mst;\r\n     }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685787513216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,9 +178,9 @@\n             }\r\n         });\r\n         LL<Edge> mst = new LL<>();\r\n         int keys = new int[V];\r\n-        Arrays\r\n+        Arrays.fill(keys,Integer.M\r\n \r\n         return mst;\r\n     }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685787524476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,10 +177,10 @@\n                 return Double.compare(o1.second(), o2.second());\r\n             }\r\n         });\r\n         LL<Edge> mst = new LL<>();\r\n-        int keys = new int[V];\r\n-        Arrays.fill(keys,Integer.M\r\n+        int[] keys = new int[V];\r\n+        Arrays.fill(keys,Integer.MAX_VALUE);\r\n \r\n         return mst;\r\n     }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685787529733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,9 @@\n                 return Double.compare(o1.second(), o2.second());\r\n             }\r\n         });\r\n         LL<Edge> mst = new LL<>();\r\n-        int[] keys = new int[V];\r\n+        int[] keys = new int[numVertices()];\r\n         Arrays.fill(keys,Integer.MAX_VALUE);\r\n \r\n         return mst;\r\n     }\r\n"
                },
                {
                    "date": 1685787534882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,10 +177,12 @@\n                 return Double.compare(o1.second(), o2.second());\r\n             }\r\n         });\r\n         LL<Edge> mst = new LL<>();\r\n+        \r\n         int[] keys = new int[numVertices()];\r\n         Arrays.fill(keys,Integer.MAX_VALUE);\r\n \r\n+\r\n         return mst;\r\n     }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685787547689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,12 +177,15 @@\n                 return Double.compare(o1.second(), o2.second());\r\n             }\r\n         });\r\n         LL<Edge> mst = new LL<>();\r\n-        \r\n+\r\n         int[] keys = new int[numVertices()];\r\n         Arrays.fill(keys,Integer.MAX_VALUE);\r\n \r\n+        int[] keys = new int[numVertices()];\r\n+        Arrays.fill(keys,Integer.MAX_VALUE);\r\n \r\n+\r\n         return mst;\r\n     }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685787556923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,10 +181,10 @@\n \r\n         int[] keys = new int[numVertices()];\r\n         Arrays.fill(keys,Integer.MAX_VALUE);\r\n \r\n-        int[] keys = new int[numVertices()];\r\n-        Arrays.fill(keys,Integer.MAX_VALUE);\r\n+        int[] parents = new int[numVertices()];\r\n+        Arrays.fill(parents,Integer.MAX_VALUE);\r\n \r\n \r\n         return mst;\r\n     }\r\n"
                },
                {
                    "date": 1685787562133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,9 @@\n         int[] keys = new int[numVertices()];\r\n         Arrays.fill(keys,Integer.MAX_VALUE);\r\n \r\n         int[] parents = new int[numVertices()];\r\n-        Arrays.fill(parents,Integer.MAX_VALUE);\r\n+        Arrays.fill(parents,-1);\r\n \r\n \r\n         return mst;\r\n     }\r\n"
                },
                {
                    "date": 1685787578432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,8 +184,10 @@\n \r\n         int[] parents = new int[numVertices()];\r\n         Arrays.fill(parents,-1);\r\n \r\n+        \r\n \r\n+\r\n         return mst;\r\n     }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685787585468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,9 +184,9 @@\n \r\n         int[] parents = new int[numVertices()];\r\n         Arrays.fill(parents,-1);\r\n \r\n-        ipq.offer(new Pair<Integer, Do\r\n+        ipq.offer(new Pair<Integer, D\r\n \r\n \r\n         return mst;\r\n     }\r\n"
                },
                {
                    "date": 1685788052925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n \r\n     LL<Edge> MSTPrim(int start){\r\n         PriorityQueue<Pair<Integer, Integer>> ipq = new PriorityQueue<>(numVertices(), new Comparator<Pair<Integer, Double>>() {\r\n             public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\r\n-                return o1.second();\r\n+                return o1.second()-;\r\n             }\r\n         });\r\n         LL<Edge> mst = new LL<>();\r\n \r\n"
                }
            ],
            "date": 1685781209362,
            "name": "Commit-0",
            "content": "import MyListADT.LL;\r\nimport Queue.QueueLL;\r\n\r\nimport java.util.Arrays;\r\n\r\npublic class GraphMat{\r\n    private final double [][] adjMat;\r\n    private int numEdge;\r\n    private final int [] vis;\r\n\r\n    public GraphMat(int n){\r\n        vis = new int[n];\r\n        adjMat = new double[n][n];\r\n        numEdge = 0;\r\n    }\r\n\r\n    public int numVertices() {return vis.length;}\r\n    public int numEdges() {return numEdge;}\r\n\r\n    public int first(int vertex) {\r\n        for(int i = 0; i < vis.length ; i++)\r\n            if(adjMat[vertex][i] != 0)return i;\r\n        return vis.length;\r\n    }\r\n\r\n    public int next(int u,int v) {\r\n        for(int i = v+1; i < vis.length ; i++)\r\n            if(adjMat[u][i] != 0)return i;\r\n        return vis.length;\r\n    }\r\n\r\n    public void setEdge(int from,int to,double weight)throws IllegalArgumentException{\r\n        if(weight == 0)throw new IllegalArgumentException();\r\n        if(adjMat[from][to] == 0)numEdge++;\r\n        adjMat[from][to] = weight;\r\n    }\r\n\r\n    public void rmEdge(int from,int to){\r\n        if(adjMat[from][to] != 0)numEdge--;\r\n        adjMat[from][to] = 0;\r\n    }\r\n\r\n    public boolean isEdge(int from,int to){return adjMat[from][to] != 0;}\r\n\r\n    public void setvis(int vertex,int val){vis[vertex] = val;}\r\n    public int getvis(int vertex){return vis[vertex];}\r\n\r\n    @Override\r\n    public String toString() {\r\n        StringBuilder sb = new StringBuilder();\r\n        for(int i = 0;i < vis.length;i++){\r\n            sb.append(i).append(\" -> \");\r\n            for(int j = 0;j < adjMat[i].length;j++){\r\n                if(isEdge(i,j)) sb.append(j).append(\" \");\r\n            }\r\n            sb.append(\"\\n\");\r\n        }\r\n        return sb.toString();\r\n    }\r\n\r\n    public String BFS(int start,boolean reset){\r\n        QueueLL<Integer> q = new QueueLL<>();\r\n        StringBuilder vert = new StringBuilder(\"{\");\r\n        StringBuilder edge = new StringBuilder(\"{\");\r\n        StringBuilder bfs = new StringBuilder();\r\n\r\n        q.enqueue(start);\r\n        setvis(start,1);\r\n\r\n        while(q.length() != 0){\r\n            int v = q.dequeue();\r\n            vert.append(v).append(\",\");\r\n            StringBuilder temp = new StringBuilder();\r\n            for(int w = first(v); w < numVertices(); w = next(v,w)){\r\n                if(getvis(w) == 0) {\r\n                    temp.append(w).append(\",\");\r\n                    edge.append(\"(\").append(v).append(\",\").append(w).append(\"),\");\r\n                    setvis(w, 1);\r\n                    q.enqueue(w);\r\n                }\r\n            }\r\n            if(temp.length() != 0){\r\n                temp.setCharAt(temp.length() - 1, '\\n');\r\n                bfs.append(v).append(\" -> \").append(temp);\r\n            }\r\n        }\r\n        if(vert.length() != 1)vert.deleteCharAt(vert.length() - 1);\r\n        if(edge.length() != 1)edge.deleteCharAt(edge.length() - 1);\r\n        vert.append(\"}\");\r\n        edge.append(\"}\");\r\n        if(reset)Arrays.fill(vis,0);\r\n        return bfs+\"V : \"+vert+\"\\nE : \"+edge+\"\\n\";\r\n    }\r\n\r\n    public String BFSAll(){\r\n        StringBuilder bfs = new StringBuilder();\r\n        for(int i = 0 ;i < vis.length;i++){\r\n            if(getvis(i) == 0)bfs.append(BFS(i,false));\r\n        }\r\n        Arrays.fill(vis,0);\r\n        return bfs +\"\\n\";\r\n    }\r\n\r\n    public String DFS(int start,boolean reset){\r\n        LL<Integer> set = new LL<>();\r\n        LL<Integer> u = new LL<>();\r\n        LL<Integer> v = new LL<>();\r\n\r\n        DFSHelper(start,set,u,v);\r\n\r\n        StringBuilder dfs = new StringBuilder();\r\n        StringBuilder vert = new StringBuilder(\"{\");\r\n        while(u.size() > 0){\r\n            int m = u.getValue();\r\n            int n = v.getValue();\r\n            dfs.append(m).append(\" -> \").append(n).append(\",\");\r\n            u.erase();\r\n            v.erase();\r\n            for(int i=0;i<u.size();i++){\r\n                u.setToPos(i);\r\n                v.setToPos(i);\r\n                if(u.getValue() == m){\r\n                    n = v.erase();\r\n                    dfs.append(n).append(\",\");\r\n                    u.erase();\r\n                }\r\n            }\r\n            u.setToBegin();\r\n            v.setToBegin();\r\n            dfs.setCharAt(dfs.length() - 1, '\\n');\r\n        }\r\n        while(set.size() > 0)vert.append(set.erase()).append(\",\");\r\n        vert.setCharAt(vert.length() - 1, '}');\r\n        vert.append(\"\\n\");\r\n        if(reset)Arrays.fill(vis,0);\r\n        return dfs +\"V : \"+vert;\r\n    }\r\n\r\n    private void DFSHelper(int start, LL<Integer> set,LL<Integer> u,LL<Integer> v) {\r\n        setvis(start,1);\r\n        set.pushBack(start);\r\n        for(int w = first(start); w < numVertices(); w = next(start,w)){\r\n            if(getvis(w) == 0){\r\n                u.pushBack(start);\r\n                v.pushBack(w);\r\n                DFSHelper(w,set,u,v);\r\n            }\r\n        }\r\n    }\r\n\r\n    public boolean checkCycle(){\r\n        boolean[] array = new boolean[vis.length];\r\n        Arrays.fill(vis,0);\r\n        for(int i = 0; i < array.length; i++){\r\n            if(cycleHelper(i, array))return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean cycleHelper(int i, boolean[] array) {\r\n        if(array[i])return true;\r\n        if(getvis(i) == 1)return false;\r\n\r\n        setvis(i,1);\r\n        array[i] = true;\r\n\r\n        for(int w = first(i); w < numVertices(); w = next(i,w)){\r\n            if(cycleHelper(w, array))return true;\r\n        }\r\n        array[i] = false;\r\n        return false;\r\n    }\r\n\r\n    LL<Edge> MSTPrim(int start){\r\n        MinHeap<Edge> minheap = new MinHeap<Edge>();\r\n        LL<Edge> mst = new LL<>();\r\n\r\n        minheap.Insert(new Edge(-1,start,0));\r\n\r\n        while(minheap.size() > 0){\r\n            Edge e = minheap.ExtractMin();\r\n            int v = e.getFinish();\r\n            if(getvis(v) == 0){\r\n                setvis(v, 1);\r\n                if(e.getStart() != -1)mst.pushBack(e);\r\n                for(int w = first(v); w < numVertices(); w = next(v,w)){\r\n                    if(getvis(w) == 0){\r\n                        minheap.Insert(new Edge(v,w,adjMat[v][w]));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return mst;\r\n    }\r\n}"
        }
    ]
}